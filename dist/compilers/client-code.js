"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ClientCode = exports.JSModule = exports.ClientCodeLevel = void 0;

var _utils = require("../utils/utils");

var _handlebars = _interopRequireDefault(require("handlebars"));

var _solidity = require("./solidity");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const path = require('path');

const fs = require('fs');

_handlebars.default.registerHelper('LB', () => '{');

_handlebars.default.registerHelper('RB', () => '}');

function compileTemplate(...pathItems) {
  const templatePath = path.resolve(__dirname, '..', '..', ...pathItems);
  const templateText = fs.readFileSync(templatePath, {
    encoding: 'utf8'
  });
  return {
    build: _handlebars.default.compile(templateText, {
      noEscape: true
    })
  };
}

async function applyTemplate(template, context) {
  return template.build(context);
}

const jsContractTemplate = compileTemplate('js-templates', 'contract.js.hbs');
const ClientCodeLevel = {
  none: 'none',
  run: 'run',
  deploy: 'deploy'
};
exports.ClientCodeLevel = ClientCodeLevel;
const JSModule = {
  node: 'node',
  nodeNoDefault: 'nodeNoDefault',
  es: 'es',
  esNoDefault: 'esNoDefault'
};
exports.JSModule = JSModule;

class ClientCode {
  static register(language) {
    ClientCode.languages[language.shortName.toLowerCase()] = language;
  }

  static async generate(files, options) {
    for (const name of options.clientLanguages) {
      const language = ClientCode.languages[name.toLocaleLowerCase()];

      if (!language) {
        throw Error(`Unknown client code language: ${name}`);
      }

      await language.generate(files, options);
    }
  }

}

exports.ClientCode = ClientCode;

_defineProperty(ClientCode, "languages", {});

const JsClientCode = {
  name: 'JavaScript',
  shortName: 'js',

  getTemplateContext(fileArg, options) {
    const file = (0, _solidity.parseSolidityFileArg)(fileArg, false);
    const {
      dir,
      name
    } = file;

    const readText = (name, encoding) => {
      if (!fs.existsSync(dir(name))) {
        throw new Error(`File not exists: ${name}`);
      }

      return fs.readFileSync(dir(name)).toString(encoding);
    };

    const imageBase64 = options.clientLevel === ClientCodeLevel.deploy ? readText(name.tvc, 'base64') : '';
    const abiJson = readText(name.abi, 'utf8').trimRight();
    const abi = {
      functions: [],
      data: [],
      ...JSON.parse(abiJson)
    };
    const className = `${name.base[0].toUpperCase()}${name.base.substr(1)}Contract`;
    const isDeploy = (options.clientLevel || 'deploy') === 'deploy';

    const varContext = v => {
      const jsType = {
        address: 'string',
        'address[]': 'string[]',
        uint256: 'string',
        uint32: 'number',
        uint16: 'number',
        uint8: 'number',
        'uint256[]': 'string[]',
        'uint32[]': 'number[]',
        'uint16[]': 'number[]',
        'uint8[]': 'number[]'
      }[v.type] || v.type;
      return { ...v,
        jsType,
        isSameJsType: jsType === v.type
      };
    };

    const funContext = f => {
      return { ...f,
        hasData: false,
        hasInputsAndData: false,
        hasInputs: f.inputs.length > 0,
        hasOutputs: f.outputs.length > 0,
        inputs: f.inputs.map(varContext),
        outputs: f.outputs.map(varContext)
      };
    };

    const constructor = funContext(abi.functions.find(x => x.name === 'constructor') || {
      name: 'constructor',
      inputs: [],
      outputs: [],
      data: []
    });
    constructor.hasData = abi.data.length > 0;
    constructor.hasInputsAndData = constructor.hasInputs && constructor.hasData;
    constructor.data = abi.data.map(varContext);
    const functions = abi.functions.filter(x => x.name !== 'constructor').map(funContext);
    return {
      imageBase64,
      abiJson,
      abi,
      className,
      isDeploy,
      constructor,
      functions,
      jsModuleNode: options.jsModule === JSModule.node || options.jsModule === JSModule.nodeNoDefault,
      jsModuleNodeDefault: options.jsModule === JSModule.node,
      jsModuleEs: options.jsModule === JSModule.es || options.jsModule === JSModule.esNoDefault,
      jsModuleEsDefault: options.jsModule === JSModule.es
    };
  },

  async generate(files, options) {
    for (const file of files) {
      const {
        dir,
        base
      } = (0, _utils.parseFileArg)(file, '.sol', false);
      const js = await applyTemplate(jsContractTemplate, JsClientCode.getTemplateContext(file, options));
      fs.writeFileSync(dir(`${base}Contract.js`), js, {
        encoding: 'utf8'
      });
    }
  }

};
ClientCode.register(JsClientCode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
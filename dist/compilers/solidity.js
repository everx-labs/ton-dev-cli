"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseSolidityFileArg = parseSolidityFileArg;
exports.Solidity = void 0;

var _dev = require("../dev");

var _utils = require("../utils/utils");

var _clientCode = require("./client-code");

var _job = require("./job");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const fs = require('fs');

function parseSolidityFileArg(fileArg, fileMustExists) {
  const parsed = (0, _utils.parseFileArg)(fileArg, '.sol', fileMustExists);
  return {
    dir: parsed.dir,
    name: {
      base: parsed.base,
      sol: parsed.name,
      tvc: `${parsed.base}.tvc`,
      code: `${parsed.base}.code`,
      abi: `${parsed.base}.abi.json`,
      package: `${parsed.base}Package`,
      result: `${parsed.base}.result`
    }
  };
}

class Solidity {
  static async build(dev, files, options) {
    const sol = new Solidity(dev, files, options);
    await sol.build();
  }

  constructor(dev, files, options) {
    _defineProperty(this, "dev", void 0);

    _defineProperty(this, "files", void 0);

    _defineProperty(this, "options", void 0);

    this.dev = dev;
    this.files = files;
    this.options = options;
  }

  async build() {
    for (let i = 0; i < this.files.length; i += 1) {
      const file = parseSolidityFileArg(this.files[i], true);
      const job = await _job.CompilersJob.create(this.dev, file.dir());
      this.prepareBuildBatch(file, job);
      await job.run('sh', job.guestPath('job.sh'));
      this.cleanBuildResults(file, job);
      await _clientCode.ClientCode.generate([this.files[i]], this.options);
    }
  }

  prepareBuildBatchForFie(file, batch) {
    const {
      name
    } = file;
    batch.push(`solc ${name.sol} --tvm > ${name.code}`, `solc ${name.sol} --tvm_abi > ${name.abi}`, `tvm_linker compile ${name.code} --lib /usr/bin/stdlib_sol.tvm --abi-json ${name.abi} > ${name.result}`);
  }

  prepareBuildBatch(file, job) {
    const batch = [];
    batch.push(`cd ${job.guestPath()}`);
    this.prepareBuildBatchForFie(file, batch);
    fs.writeFileSync(job.hostPath('job.sh'), batch.join('\n'));
  }

  cleanBuildResults(file, job) {
    const {
      name
    } = file;
    const linkerResult = fs.readFileSync(job.hostPath(name.result), {
      encoding: 'utf8'
    });
    const tvcFile = (/Saved contract to file\s*(.*\.tvc)/gi.exec(linkerResult) || [])[1];

    if (!tvcFile) {
      console.log(linkerResult);
      process.exit(1);
    }

    fs.renameSync(job.hostPath(tvcFile), job.hostPath(name.tvc));
    fs.unlinkSync(job.hostPath('job.sh'));
    fs.unlinkSync(job.hostPath(name.result));
    fs.unlinkSync(job.hostPath(name.code));
  }

}

exports.Solidity = Solidity;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
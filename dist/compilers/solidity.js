"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseSolidityFileArg = parseSolidityFileArg;
exports.Solidity = void 0;

var _dev = require("../dev");

var _utils = require("../utils/utils");

var _clientCode = require("./client-code");

var _job = require("./job");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const fs = require('fs');

function parseSolidityFileArg(fileArg, fileMustExists) {
  const parsed = (0, _utils.parseFileArg)(fileArg, '.sol', fileMustExists);
  return {
    dir: parsed.dir,
    name: {
      base: parsed.base,
      sol: parsed.name,
      tvc: `${parsed.base}.tvc`,
      code: `${parsed.base}.code`,
      abi: `${parsed.base}.abi.json`,
      package: `${parsed.base}Package`,
      result: `${parsed.base}.result`
    }
  };
}

class Solidity {
  static async build(dev, files, options) {
    const sol = new Solidity(dev, files, options);
    await sol.build();
  }

  constructor(dev, files, options) {
    _defineProperty(this, "dev", void 0);

    _defineProperty(this, "files", void 0);

    _defineProperty(this, "options", void 0);

    this.dev = dev;
    this.files = files;
    this.options = options;
  }

  async build() {
    for (let i = 0; i < this.files.length; i += 1) {
      const file = parseSolidityFileArg(this.files[i], true);
      const job = await _job.CompilersJob.create(this.dev, file.dir());
      this.prepareBuildBatch(file, job);
      await job.run('sh', job.guestPath('job.sh'));
      this.cleanBuildResults(file, job);
      await _clientCode.ClientCode.generate([this.files[i]], this.options);
    }
  }

  prepareBuildBatchForFile(file, batch) {
    const {
      name
    } = file;

    if (this.dev.compilers.getConfig().version === 'latest') {
      batch.push(`solc ${name.sol}`, `tvm_linker compile ${name.code} --lib /usr/bin/stdlib_sol.tvm --abi-json ${name.abi} > ${name.result}`);
    } else {
      batch.push(`solc ${name.sol} --tvm > ${name.code}`, `solc ${name.sol} --tvm_abi > ${name.abi} || solc ${name.sol} --tvm-abi > ${name.abi}`, `tvm_linker compile ${name.code} --lib /usr/bin/stdlib_sol.tvm --abi-json ${name.abi} > ${name.result}`);
    }
  }

  prepareBuildBatch(file, job) {
    const batch = [];
    batch.push(`cd ${job.guestPath()}`);
    this.prepareBuildBatchForFile(file, batch);
    fs.writeFileSync(job.hostPath('job.sh'), batch.join('\n'));
  }

  cleanBuildResults(file, job) {
    const {
      name
    } = file;
    const linkerResult = fs.readFileSync(job.hostPath(name.result), {
      encoding: 'utf8'
    });
    const tvcFile = (/Saved contract to file\s*(.*\.tvc)/gi.exec(linkerResult) || [])[1];

    if (!tvcFile) {
      console.log(linkerResult);
      process.exit(1);
    }

    fs.renameSync(job.hostPath(tvcFile), job.hostPath(name.tvc));
    fs.unlinkSync(job.hostPath('job.sh'));
    fs.unlinkSync(job.hostPath(name.result));
    fs.unlinkSync(job.hostPath(name.code));
  }

}

exports.Solidity = Solidity;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21waWxlcnMvc29saWRpdHkuanMiXSwibmFtZXMiOlsiZnMiLCJyZXF1aXJlIiwicGFyc2VTb2xpZGl0eUZpbGVBcmciLCJmaWxlQXJnIiwiZmlsZU11c3RFeGlzdHMiLCJwYXJzZWQiLCJkaXIiLCJuYW1lIiwiYmFzZSIsInNvbCIsInR2YyIsImNvZGUiLCJhYmkiLCJwYWNrYWdlIiwicmVzdWx0IiwiU29saWRpdHkiLCJidWlsZCIsImRldiIsImZpbGVzIiwib3B0aW9ucyIsImNvbnN0cnVjdG9yIiwiaSIsImxlbmd0aCIsImZpbGUiLCJqb2IiLCJDb21waWxlcnNKb2IiLCJjcmVhdGUiLCJwcmVwYXJlQnVpbGRCYXRjaCIsInJ1biIsImd1ZXN0UGF0aCIsImNsZWFuQnVpbGRSZXN1bHRzIiwiQ2xpZW50Q29kZSIsImdlbmVyYXRlIiwicHJlcGFyZUJ1aWxkQmF0Y2hGb3JGaWxlIiwiYmF0Y2giLCJjb21waWxlcnMiLCJnZXRDb25maWciLCJ2ZXJzaW9uIiwicHVzaCIsIndyaXRlRmlsZVN5bmMiLCJob3N0UGF0aCIsImpvaW4iLCJsaW5rZXJSZXN1bHQiLCJyZWFkRmlsZVN5bmMiLCJlbmNvZGluZyIsInR2Y0ZpbGUiLCJleGVjIiwiY29uc29sZSIsImxvZyIsInByb2Nlc3MiLCJleGl0IiwicmVuYW1lU3luYyIsInVubGlua1N5bmMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBaUJBOztBQUVBOztBQUVBOztBQUNBOzs7O0FBRUEsTUFBTUEsRUFBRSxHQUFHQyxPQUFPLENBQUMsSUFBRCxDQUFsQjs7QUFpQk8sU0FBU0Msb0JBQVQsQ0FBOEJDLE9BQTlCLEVBQStDQyxjQUEvQyxFQUF5RjtBQUM1RixRQUFNQyxNQUFNLEdBQUcseUJBQWFGLE9BQWIsRUFBc0IsTUFBdEIsRUFBOEJDLGNBQTlCLENBQWY7QUFDQSxTQUFPO0FBQ0hFLElBQUFBLEdBQUcsRUFBRUQsTUFBTSxDQUFDQyxHQURUO0FBRUhDLElBQUFBLElBQUksRUFBRTtB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LElBQUksQ0FBQ0csR0FBbEIsQ0FBckM7QUFDQVYsSUFBQUEsRUFBRSxDQUFDb0QsVUFBSCxDQUFjNUIsR0FBRyxDQUFDZ0IsUUFBSixDQUFhLFFBQWIsQ0FBZDtBQUNBeEMsSUFBQUEsRUFBRSxDQUFDb0QsVUFBSCxDQUFjNUIsR0FBRyxDQUFDZ0IsUUFBSixDQUFhakMsSUFBSSxDQUFDTyxNQUFsQixDQUFkO0FBQ0FkLElBQUFBLEVBQUUsQ0FBQ29ELFVBQUgsQ0FBYzVCLEdBQUcsQ0FBQ2dCLFFBQUosQ0FBYWpDLElBQUksQ0FBQ0ksSUFBbEIsQ0FBZDtBQUNIOztBQTlEaUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMTgtMjAyMCBUT04gREVWIFNPTFVUSU9OUyBMVEQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIFNPRlRXQVJFIEVWQUxVQVRJT04gTGljZW5zZSAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXG4gKiB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcbiAqIExpY2Vuc2UgYXQ6IGh0dHBzOi8vd3d3LnRvbi5kZXYvbGljZW5zZXNcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIFRPTiBERVYgc29mdHdhcmUgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG4vLyBAZmxvd1xuXG5cbmltcG9ydCB7IERldiB9IGZyb20gXCIuLi9kZXZcIjtcbmltcG9ydCB0eXBlIHsgUGF0aEpvaW4gfSBmcm9tIFwiLi4vdXRpbHMvdXRpbHNcIjtcbmltcG9ydCB7IHBhcnNlRmlsZUFyZyB9IGZyb20gXCIuLi91dGlscy91dGlsc1wiO1xuaW1wb3J0IHR5cGUgeyBDbGllbnRDb2RlT3B0aW9ucyB9IGZyb20gXCIuL2NsaWVudC1jb2RlXCI7XG5pbXBvcnQgeyBDbGllbnRDb2RlIH0gZnJvbSBcIi4vY2xpZW50LWNvZGVcIjtcbmltcG9ydCB7IENvbXBpbGVyc0pvYiB9IGZyb20gXCIuL2pvYlwiO1xuXG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5cbmV4cG9ydCB0eXBlIFNvbGlkaXR5QnVpbGRPcHRpb25zID0gQ2xpZW50Q29kZU9wdGlvbnM7XG5cbnR5cGUgU29saWRpdHlGaWxlQXJnID0ge1xuICAgIGRpcjogUGF0aEpvaW4sXG4gICAgbmFtZToge1xuICAgICAgICBiYXNlOiBzdHJpbmcsXG4gICAgICAgIHNvbDogc3RyaW5nLFxuICAgICAgICB0dmM6IHN0cmluZyxcbiAgICAgICAgY29kZTogc3RyaW5nLFxuICAgICAgICBhYmk6IHN0cmluZyxcbiAgICAgICAgcGFja2FnZTogc3RyaW5nLFxuICAgICAgICByZXN1bHQ6IHN0cmluZyxcbiAgICB9LFxufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VTb2xpZGl0eUZpbGVBcmcoZmlsZUFyZzogc3RyaW5nLCBmaWxlTXVzdEV4aXN0czogYm9vbGVhbik6IFNvbGlkaXR5RmlsZUFyZyB7XG4gICAgY29uc3QgcGFyc2VkID0gcGFyc2VGaWxlQXJnKGZpbGVBcmcsICcuc29sJywgZmlsZU11c3RFeGlzdHMpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRpcjogcGFyc2VkLmRpcixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgYmFzZTogcGFyc2VkLmJhc2UsXG4gICAgICAgICAgICBzb2w6IHBhcnNlZC5uYW1lLFxuICAgICAgICAgICAgdHZjOiBgJHtwYXJzZWQuYmFzZX0udHZjYCxcbiAgICAgICAgICAgIGNvZGU6IGAke3BhcnNlZC5iYXNlfS5jb2RlYCxcbiAgICAgICAgICAgIGFiaTogYCR7cGFyc2VkLmJhc2V9LmFiaS5qc29uYCxcbiAgICAgICAgICAgIHBhY2thZ2U6IGAke3BhcnNlZC5iYXNlfVBhY2thZ2VgLFxuICAgICAgICAgICAgcmVzdWx0OiBgJHtwYXJzZWQuYmFzZX0ucmVzdWx0YCxcbiAgICAgICAgfSxcbiAgICB9O1xufVxuXG5leHBvcnQgY2xhc3MgU29saWRpdHkge1xuICAgIHN0YXRpYyBhc3luYyBidWlsZChkZXY6IERldiwgZmlsZXM6IHN0cmluZ1tdLCBvcHRpb25zOiBTb2xpZGl0eUJ1aWxkT3B0aW9ucykge1xuICAgICAgICBjb25zdCBzb2wgPSBuZXcgU29saWRpdHkoZGV2LCBmaWxlcywgb3B0aW9ucyk7XG4gICAgICAgIGF3YWl0IHNvbC5idWlsZCgpO1xuICAgIH1cblxuICAgIGRldjogRGV2O1xuICAgIGZpbGVzOiBzdHJpbmdbXTtcbiAgICBvcHRpb25zOiBTb2xpZGl0eUJ1aWxkT3B0aW9ucztcblxuICAgIGNvbnN0cnVjdG9yKGRldjogRGV2LCBmaWxlczogc3RyaW5nW10sIG9wdGlvbnM6IFNvbGlkaXR5QnVpbGRPcHRpb25zKSB7XG4gICAgICAgIHRoaXMuZGV2ID0gZGV2O1xuICAgICAgICB0aGlzLmZpbGVzID0gZmlsZXM7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuXG4gICAgYXN5bmMgYnVpbGQoKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5maWxlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgY29uc3QgZmlsZSA9IHBhcnNlU29saWRpdHlGaWxlQXJnKHRoaXMuZmlsZXNbaV0sIHRydWUpO1xuICAgICAgICAgICAgY29uc3Qgam9iID0gYXdhaXQgQ29tcGlsZXJzSm9iLmNyZWF0ZSh0aGlzLmRldiwgZmlsZS5kaXIoKSk7XG4gICAgICAgICAgICB0aGlzLnByZXBhcmVCdWlsZEJhdGNoKGZpbGUsIGpvYik7XG4gICAgICAgICAgICBhd2FpdCBqb2IucnVuKCdzaCcsIGpvYi5ndWVzdFBhdGgoJ2pvYi5zaCcpKTtcbiAgICAgICAgICAgIHRoaXMuY2xlYW5CdWlsZFJlc3VsdHMoZmlsZSwgam9iKTtcbiAgICAgICAgICAgIGF3YWl0IENsaWVudENvZGUuZ2VuZXJhdGUoW3RoaXMuZmlsZXNbaV1dLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJlcGFyZUJ1aWxkQmF0Y2hGb3JGaWxlKGZpbGU6IFNvbGlkaXR5RmlsZUFyZywgYmF0Y2g6IHN0cmluZ1tdKSB7XG4gICAgICAgIGNvbnN0IHsgbmFtZSB9ID0gZmlsZTtcbiAgICAgICAgaWYgKHRoaXMuZGV2LmNvbXBpbGVycy5nZXRDb25maWcoKS52ZXJzaW9uID09PSAnbGF0ZXN0Jykge1xuICAgICAgICAgICAgYmF0Y2gucHVzaChcbiAgICAgICAgICAgICAgICBgc29sYyAke25hbWUuc29sfWAsXG4gICAgICAgICAgICAgICAgYHR2bV9saW5rZXIgY29tcGlsZSAke25hbWUuY29kZX0gLS1saWIgL3Vzci9iaW4vc3RkbGliX3NvbC50dm0gLS1hYmktanNvbiAke25hbWUuYWJpfSA+ICR7bmFtZS5yZXN1bHR9YFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJhdGNoLnB1c2goXG4gICAgICAgICAgICAgICAgYHNvbGMgJHtuYW1lLnNvbH0gLS10dm0gPiAke25hbWUuY29kZX1gLFxuICAgICAgICAgICAgICAgIGBzb2xjICR7bmFtZS5zb2x9IC0tdHZtX2FiaSA+ICR7bmFtZS5hYml9IHx8IHNvbGMgJHtuYW1lLnNvbH0gLS10dm0tYWJpID4gJHtuYW1lLmFiaX1gLFxuICAgICAgICAgICAgICAgIGB0dm1fbGlua2VyIGNvbXBpbGUgJHtuYW1lLmNvZGV9IC0tbGliIC91c3IvYmluL3N0ZGxpYl9zb2wudHZtIC0tYWJpLWpzb24gJHtuYW1lLmFiaX0gPiAke25hbWUucmVzdWx0fWBcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcmVwYXJlQnVpbGRCYXRjaChmaWxlOiBTb2xpZGl0eUZpbGVBcmcsIGpvYjogQ29tcGlsZXJzSm9iKSB7XG4gICAgICAgIGNvbnN0IGJhdGNoID0gW107XG4gICAgICAgIGJhdGNoLnB1c2goYGNkICR7am9iLmd1ZXN0UGF0aCgpfWApO1xuICAgICAgICB0aGlzLnByZXBhcmVCdWlsZEJhdGNoRm9yRmlsZShmaWxlLCBiYXRjaCk7XG4gICAgICAgIGZzLndyaXRlRmlsZVN5bmMoam9iLmhvc3RQYXRoKCdqb2Iuc2gnKSwgYmF0Y2guam9pbignXFxuJykpO1xuICAgIH1cblxuICAgIGNsZWFuQnVpbGRSZXN1bHRzKGZpbGU6IFNvbGlkaXR5RmlsZUFyZywgam9iOiBDb21waWxlcnNKb2IpIHtcbiAgICAgICAgY29uc3QgeyBuYW1lIH0gPSBmaWxlO1xuICAgICAgICBjb25zdCBsaW5rZXJSZXN1bHQgPSBmcy5yZWFkRmlsZVN5bmMoam9iLmhvc3RQYXRoKG5hbWUucmVzdWx0KSwgeyBlbmNvZGluZzogJ3V0ZjgnIH0pO1xuICAgICAgICBjb25zdCB0dmNGaWxlID0gKC9TYXZlZCBjb250cmFjdCB0byBmaWxlXFxzKiguKlxcLnR2YykvZ2kuZXhlYyhsaW5rZXJSZXN1bHQpIHx8IFtdKVsxXTtcbiAgICAgICAgaWYgKCF0dmNGaWxlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhsaW5rZXJSZXN1bHQpO1xuICAgICAgICAgICAgcHJvY2Vzcy5leGl0KDEpXG4gICAgICAgIH1cbiAgICAgICAgZnMucmVuYW1lU3luYyhqb2IuaG9zdFBhdGgodHZjRmlsZSksIGpvYi5ob3N0UGF0aChuYW1lLnR2YykpO1xuICAgICAgICBmcy51bmxpbmtTeW5jKGpvYi5ob3N0UGF0aCgnam9iLnNoJykpO1xuICAgICAgICBmcy51bmxpbmtTeW5jKGpvYi5ob3N0UGF0aChuYW1lLnJlc3VsdCkpO1xuICAgICAgICBmcy51bmxpbmtTeW5jKGpvYi5ob3N0UGF0aChuYW1lLmNvZGUpKTtcbiAgICB9XG59XG4iXX0=
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Compilers = void 0;

var _docker = require("../utils/docker");

var _utils = require("../utils/utils");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Compilers {
  constructor(config) {
    _defineProperty(this, "version", void 0);

    _defineProperty(this, "requiredImage", void 0);

    _defineProperty(this, "containerName", void 0);

    _defineProperty(this, "mountDestination", void 0);

    this.setConfig(config);
  }

  setConfig(config) {
    this.version = config.version;
    this.requiredImage = `${Compilers.imagePrefix}:${config.version}`;
    this.containerName = `${Compilers.containerPrefix}-${_utils.userIdentifier}`;
    this.mountDestination = '/projects';
  }

  getConfig() {
    return {
      version: this.version
    };
  }

  async createContainer(docker) {
    throw new Error('Internal error: invalid call to Compilers.createContainer');
  }

  async createContainerMountedTo(hostPath, docker) {
    await docker.ensureImage(this.requiredImage);
    const existing = await docker.getContainerInfos();
    let name = '';
    let index = 0;

    do {
      name = `${this.containerName}${index > 0 ? `-${index}` : ''}`;
      index += 1;
    } while (existing.find(x => _docker.DevDocker.hasName(x, name)));

    docker.dropCache();
    return docker.client.createContainer({
      name,
      interactive: true,
      Image: this.requiredImage,
      Tty: true,
      Env: ['USER_AGREEMENT=yes'],
      HostConfig: {
        Mounts: [{
          Type: 'bind',
          Source: hostPath,
          Target: this.mountDestination
        }]
      }
    });
  }

}

exports.Compilers = Compilers;

_defineProperty(Compilers, "imagePrefix", 'tonlabs/compilers');

_defineProperty(Compilers, "containerPrefix", 'tonlabs-compilers');

_defineProperty(Compilers, "defaultConfig", Object.freeze({
  version: 'latest'
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21waWxlcnMvY29tcGlsZXJzLmpzIl0sIm5hbWVzIjpbIkNvbXBpbGVycyIsImNvbnN0cnVjdG9yIiwiY29uZmlnIiwic2V0Q29uZmlnIiwidmVyc2lvbiIsInJlcXVpcmVkSW1hZ2UiLCJpbWFnZVByZWZpeCIsImNvbnRhaW5lck5hbWUiLCJjb250YWluZXJQcmVmaXgiLCJ1c2VySWRlbnRpZmllciIsIm1vdW50RGVzdGluYXRpb24iLCJnZXRDb25maWciLCJjcmVhdGVDb250YWluZXIiLCJkb2NrZXIiLCJFcnJvciIsImNyZWF0ZUNvbnRhaW5lck1vdW50ZWRUbyIsImhvc3RQYXRoIiwiZW5zdXJlSW1hZ2UiLCJleGlzdGluZyIsImdldENvbnRhaW5lckluZm9zIiwibmFtZSIsImluZGV4IiwiZmluZCIsIngiLCJEZXZEb2NrZXIiLCJoYXNOYW1lIiwiZHJvcENhY2hlIiwiY2xpZW50IiwiaW50ZXJhY3RpdmUiLCJJbWFnZSIsIlR0eSIsIkVudiIsIkhvc3RDb25maWciLCJNb3VudHMiLCJUeXBlIiwiU291cmNlIiwiVGFyZ2V0IiwiT2JqZWN0IiwiZnJlZXplIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBZ0JBOztBQUNBOzs7O0FBT08sTUFBTUEsU0FBTixDQUF3QztBQVkzQ0MsRUFBQUEsV0FBVyxDQUFDQyxNQUFELEVBQTBCO0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQ2pDLFNBQUtDLFNBQUwsQ0FBZUQsTUFBZjtBQUNIOztBQUVEQyxFQUFBQSxTQUFTLENBQUNELE1BQUQsRUFBMEI7QUFDL0IsU0FBS0UsT0FBTCxHQUFlRixNQUFNLENBQUNFLE9BQXRCO0FBQ0EsU0FBS0MsYUFBTCxHQUFzQixHQUFFTCxTQUFTLENBQUNNLFdBQVksSUFBR0osTUFBTSxDQUFDRSxPQUFRLEVBQWhFO0FBQ0EsU0FBS0csYUFBTCxHQUFzQixHQUFFUCxTQUFTLENBQUNRLGVBQWdCLElBQUdDLHFCQUFlLEVBQXBFO0FBQ0EsU0FBS0MsZ0JBQUwsR0FBd0IsV0FBeEI7QUFDSDs7QUFFREMsRUFBQUEsU0FBUyxHQUFvQjtBQUN6QixXQUFPO0FBQ0hQLE1BQUFBLE9BQU8sRUFBRSxLQUFLQTtBQURYLEtBQVA7QUFHSDs7QUFFRCxRQUFNUSxlQUFOLENBQXNCQyxNQUF0QixFQUFtRTtBQUMvRCxVQUFNLElBQUlDLEtBQUosQ0FBVSwyREFBVixDQUFOO0FBQ0g7O0FBRUQsUUFBTUMsd0JBQU4sQ0FBK0JDLFFBQS9CLEVBQWlESCxNQUFqRCxFQUE4RjtBQUMxRixVQUFNQSxNQUFNLENBQUNJLFdBQVAsQ0FBbUIsS0FBS1osYUFBeEIsQ0FBTjtBQUNBLFVBQU1hLFFBQVEsR0FBRyxNQUFNTCxNQUFNLENBQUNNLGlCQUFQLEVBQXZCO0FBQ0EsUUFBSUMsSUFBSSxHQUFHLEVBQVg7QUFDQSxRQUFJQyxLQUFLLEdBQUcsQ0FBWjs7QUFDQSxPQUFHO0FBQ0NELE1BQUFBLElBQUksR0FBSSxHQUFFLEtBQUtiLGFBQWMsR0FBRWMsS0FBSyxHQUFHLENBQVIsR0FBYSxJQUFHQSxLQUFNLEVBQXRCLEdBQTBCLEVBQUcsRUFBNUQ7QUFDQUEsTUFBQUEsS0FBSyxJQUFJLENBQVQ7QUFDSCxLQUhELFFBR1NILFFBQVEsQ0FBQ0ksSUFBVCxDQUFjQyxDQUFDLElBQUlDLGtCQUFVQyxPQUFWLENBQWtCRixDQUFsQixFQUFxQkgsSUFBckIsQ0FBbkIsQ0FIVDs7QUFJQVAsSUFBQUEsTUFBTSxDQUFDYSxTQUFQO0FBQ0EsV0FBT2IsTUFBTSxDQUFDYyxNQUFQLENBQWNmLGVBQWQsQ0FBOEI7QUFDakNRLE1BQUFBLElBRGlDO0FBRWpDUSxNQUFBQSxXQUFXLEVBQUUsSUFGb0I7QUFHakNDLE1BQUFBLEtBQUssRUFBRSxLQUFLeEIsYUFIcUI7QUFJakN5QixNQUFBQSxHQUFHLEVBQUUsSUFKNEI7QUFLakNDLE1BQUFBLEdBQUcsRUFBRSxDQUFDLG9CQUFELENBTDRCO0FBTWpDQyxNQUFBQSxVQUFVLEVBQUU7QUFDUkMsUUFBQUEsTUFBTSxFQUFFLENBQ0o7QUFDSUMsVUFBQUEsSUFBSSxFQUFFLE1BRFY7QUFFSUMsVUFBQUEsTUFBTSxFQUFFbkIsUUFGWjtBQUdJb0IsVUFBQUEsTUFBTSxFQUFFLEtBQUsxQjtBQUhqQixTQURJO0FBREE7QUFOcUIsS0FBOUIsQ0FBUDtBQWdCSDs7QUEzRDBDOzs7O2dCQUFsQ1YsUyxpQkFDWSxtQjs7Z0JBRFpBLFMscUJBRWdCLG1COztnQkFGaEJBLFMsbUJBRytCcUMsTUFBTSxDQUFDQyxNQUFQLENBQWM7QUFDbERsQyxFQUFBQSxPQUFPLEVBQUU7QUFEeUMsQ0FBZCxDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDE4LTIwMjAgVE9OIERFViBTT0xVVElPTlMgTFRELlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBTT0ZUV0FSRSBFVkFMVUFUSU9OIExpY2Vuc2UgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZVxuICogdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlXG4gKiBMaWNlbnNlIGF0OiBodHRwczovL3d3dy50b24uZGV2L2xpY2Vuc2VzXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBUT04gREVWIHNvZnR3YXJlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xuLy8gQGZsb3dcbmltcG9ydCB0eXBlIHsgQ29udGFpbmVyRGVmLCBEb2NrZXJDb250YWluZXIgfSBmcm9tIFwiLi4vdXRpbHMvZG9ja2VyXCI7XG5pbXBvcnQgeyBEZXZEb2NrZXIgfSBmcm9tIFwiLi4vdXRpbHMvZG9ja2VyXCI7XG5pbXBvcnQgeyB1c2VySWRlbnRpZmllciB9IGZyb20gXCIuLi91dGlscy91dGlsc1wiO1xuXG5leHBvcnQgdHlwZSBDb21waWxlcnNDb25maWcgPSB7XG4gICAgdmVyc2lvbjogc3RyaW5nLFxufVxuXG5cbmV4cG9ydCBjbGFzcyBDb21waWxlcnMgaW1wbGVtZW50cyBDb250YWluZXJEZWYge1xuICAgIHN0YXRpYyBpbWFnZVByZWZpeCA9ICd0b25sYWJzL2NvbXBpbGVycyc7XG4gICAgc3RhdGljIGNvbnRhaW5lclByZWZpeCA9ICd0b25sYWJzLWNvbXBpbGVycyc7XG4gICAgc3RhdGljIGRlZmF1bHRDb25maWc6IENvbXBpbGVyc0NvbmZpZyA9IE9iamVjdC5mcmVlemUoe1xuICAgICAgICB2ZXJzaW9uOiAnbGF0ZXN0J1xuICAgIH0pO1xuXG4gICAgdmVyc2lvbjogc3RyaW5nO1xuICAgIHJlcXVpcmVkSW1hZ2U6IHN0cmluZztcbiAgICBjb250YWluZXJOYW1lOiBzdHJpbmc7XG4gICAgbW91bnREZXN0aW5hdGlvbjogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoY29uZmlnOiBDb21waWxlcnNDb25maWcpIHtcbiAgICAgICAgdGhpcy5zZXRDb25maWcoY29uZmlnKTtcbiAgICB9XG5cbiAgICBzZXRDb25maWcoY29uZmlnOiBDb21waWxlcnNDb25maWcpIHtcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gY29uZmlnLnZlcnNpb247XG4gICAgICAgIHRoaXMucmVxdWlyZWRJbWFnZSA9IGAke0NvbXBpbGVycy5pbWFnZVByZWZpeH06JHtjb25maWcudmVyc2lvbn1gO1xuICAgICAgICB0aGlzLmNvbnRhaW5lck5hbWUgPSBgJHtDb21waWxlcnMuY29udGFpbmVyUHJlZml4fS0ke3VzZXJJZGVudGlmaWVyfWA7XG4gICAgICAgIHRoaXMubW91bnREZXN0aW5hdGlvbiA9ICcvcHJvamVjdHMnO1xuICAgIH1cblxuICAgIGdldENvbmZpZygpOiBDb21waWxlcnNDb25maWcge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmVyc2lvbjogdGhpcy52ZXJzaW9uLFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgY3JlYXRlQ29udGFpbmVyKGRvY2tlcjogRGV2RG9ja2VyKTogUHJvbWlzZTxEb2NrZXJDb250YWluZXI+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnRlcm5hbCBlcnJvcjogaW52YWxpZCBjYWxsIHRvIENvbXBpbGVycy5jcmVhdGVDb250YWluZXInKTtcbiAgICB9XG5cbiAgICBhc3luYyBjcmVhdGVDb250YWluZXJNb3VudGVkVG8oaG9zdFBhdGg6IHN0cmluZywgZG9ja2VyOiBEZXZEb2NrZXIpOiBQcm9taXNlPERvY2tlckNvbnRhaW5lcj4ge1xuICAgICAgICBhd2FpdCBkb2NrZXIuZW5zdXJlSW1hZ2UodGhpcy5yZXF1aXJlZEltYWdlKTtcbiAgICAgICAgY29uc3QgZXhpc3RpbmcgPSBhd2FpdCBkb2NrZXIuZ2V0Q29udGFpbmVySW5mb3MoKTtcbiAgICAgICAgbGV0IG5hbWUgPSAnJztcbiAgICAgICAgbGV0IGluZGV4ID0gMDtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgbmFtZSA9IGAke3RoaXMuY29udGFpbmVyTmFtZX0ke2luZGV4ID4gMCA/IGAtJHtpbmRleH1gIDogJyd9YDtcbiAgICAgICAgICAgIGluZGV4ICs9IDE7XG4gICAgICAgIH0gd2hpbGUgKGV4aXN0aW5nLmZpbmQoeCA9PiBEZXZEb2NrZXIuaGFzTmFtZSh4LCBuYW1lKSkpO1xuICAgICAgICBkb2NrZXIuZHJvcENhY2hlKCk7XG4gICAgICAgIHJldHVybiBkb2NrZXIuY2xpZW50LmNyZWF0ZUNvbnRhaW5lcih7XG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgaW50ZXJhY3RpdmU6IHRydWUsXG4gICAgICAgICAgICBJbWFnZTogdGhpcy5yZXF1aXJlZEltYWdlLFxuICAgICAgICAgICAgVHR5OiB0cnVlLFxuICAgICAgICAgICAgRW52OiBbJ1VTRVJfQUdSRUVNRU5UPXllcyddLFxuICAgICAgICAgICAgSG9zdENvbmZpZzoge1xuICAgICAgICAgICAgICAgIE1vdW50czogW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBUeXBlOiAnYmluZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBTb3VyY2U6IGhvc3RQYXRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgVGFyZ2V0OiB0aGlzLm1vdW50RGVzdGluYXRpb24sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.web = web;
exports.TONDevWebConsole = void 0;

var _dev = require("../dev");

var _utils = require("../utils/utils");

var _handlebars = _interopRequireDefault(require("handlebars"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const express = require('express');

const cors = require('cors');

const path = require('path');

const fs = require('fs');

function applyTemplate(name, context) {
  const templatePath = path.resolve(__dirname, '..', '..', 'src', 'server', 'templates', `${name}.hbs`);
  const templateText = fs.readFileSync(templatePath, {
    encoding: 'utf8'
  });

  const template = _handlebars.default.compile(templateText, {
    noEscape: true
  });

  return template(context);
}

class TONDevWebConsole {
  constructor(dev, options) {
    _defineProperty(this, "dev", void 0);

    _defineProperty(this, "options", void 0);

    this.dev = dev;
    this.options = options;
  }

  start() {
    const app = express();
    app.use(express.json());
    app.use(cors());
    app.get('/', this.main.bind(this));
    app.listen({
      port: this.options.port
    }, () => {
      const uri = `http://localhost:${this.options.port}`;
      console.debug(`TON Dev Web Console started on ${uri}`);
    });
  }

  async main(req, res) {
    try {
      await res.send(applyTemplate('main', this.dev));
      res.end();
    } catch (error) {
      console.log('[Web Console] request failed', error);
      await res.json({
        jsonrpc: '2.0',
        id: 1,
        error: {
          code: Number.parseInt(error && error.code) || 1,
          message: error.message || error.toString(),
          data: error
        }
      });
    }
  }

}

exports.TONDevWebConsole = TONDevWebConsole;

async function web(dev, options) {
  const server = new TONDevWebConsole(dev, options);
  server.start();
  return (0, _utils.inputLine)();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXJ2ZXIvc2VydmVyLmpzIl0sIm5hbWVzIjpbImV4cHJlc3MiLCJyZXF1aXJlIiwiY29ycyIsInBhdGgiLCJmcyIsImFwcGx5VGVtcGxhdGUiLCJuYW1lIiwiY29udGV4dCIsInRlbXBsYXRlUGF0aCIsInJlc29sdmUiLCJfX2Rpcm5hbWUiLCJ0ZW1wbGF0ZVRleHQiLCJyZWFkRmlsZVN5bmMiLCJlbmNvZGluZyIsInRlbXBsYXRlIiwiSGFuZGxlYmFycyIsImNvbXBpbGUiLCJub0VzY2FwZSIsIlRPTkRldldlYkNvbnNvbGUiLCJjb25zdHJ1Y3RvciIsImRldiIsIm9wdGlvbnMiLCJzdGFydCIsImFwcCIsInVzZSIsImpzb24iLCJnZXQiLCJtYWluIiwiYmluZCIsImxpc3RlbiIsInBvcnQiLCJ1cmkiLCJjb25zb2xlIiwiZGVidWciLCJyZXEiLCJyZXMiLCJzZW5kIiwiZW5kIiwiZXJyb3IiLCJsb2ciLCJqc29ucnBjIiwiaWQiLCJjb2RlIiwiTnVtYmVyIiwicGFyc2VJbnQiLCJtZXNzYWdlIiwidG9TdHJpbmciLCJkYXRhIiwid2ViIiwic2VydmVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQWtCQTs7QUFDQTs7QUFJQTs7Ozs7O0FBRkEsTUFBTUEsT0FBTyxHQUFHQyxPQUFPLENBQUMsU0FBRCxDQUF2Qjs7QUFDQSxNQUFNQyxJQUFJLEdBQUdELE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUdBLE1BQU1FLElBQUksR0FBR0YsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsTUFBTUcsRUFBRSxHQUFHSCxPQUFPLENBQUMsSUFBRCxDQUFsQjs7QUFFQSxTQUFTSSxhQUFULENBQXVCQyxJQUF2QixFQUFxQ0MsT0FBckMsRUFBb0U7QUFDaEUsUUFBTUMsWUFBWSxHQUFHTCxJQUFJLENBQUNNLE9BQUwsQ0FBYUMsU0FBYixFQUF3QixJQUF4QixFQUE4QixJQUE5QixFQUFvQyxLQUFwQyxFQUEyQyxRQUEzQyxFQUFxRCxXQUFyRCxFQUFtRSxHQUFFSixJQUFLLE1BQTFFLENBQXJCO0FBQ0EsUUFBTUssWUFBWSxHQUFHUCxFQUFFLENBQUNRLFlBQUgsQ0FBZ0JKLFlBQWhCLEVBQThCO0FBQUVLLElBQUFBLFFBQVEsRUFBRTtBQUFaLEdBQTlCLENBQXJCOztBQUNBLFFBQU1DLFFBQVEsR0FBR0Msb0JBQVdDLE9BQVgsQ0FBbUJMLFlBQW5CLEVBQWlDO0FBQzlDTSxJQUFBQSxRQUFRLEVBQUU7QUFEb0MsR0FBakMsQ0FBakI7O0FBR0EsU0FBT0gsUUFBUSxDQUFDUCxPQUFELENBQWY7QUFDSDs7QUFFTSxNQUFNVyxnQkFBTixDQUF1QjtBQUkxQkMsRUFBQUEsV0FBVyxDQUFDQyxHQUFELEVBQVdDLE9BQVgsRUFBZ0M7QUFBQTs7QUFBQTs7QUFDdkMsU0FBS0QsR0FBTCxHQUFXQSxHQUFYO0FBQ0EsU0FBS0MsT0FBTCxHQUFlQSxPQUFmO0FBQ0g7O0FBRURDLEVBQUFBLEtBQUssR0FBRztBQUNKLFVBQU1DLEdBQUcsR0FBR3ZCLE9BQU8sRUFBbkI7QUFDQXVCLElBQUFBLEdBQUcsQ0FBQ0MsR0FBSixDQUFReEIsT0FBTyxDQUFDeUIsSUFBUixFQUFSO0FBQ0FGLElBQUFBLEdBQUcsQ0FBQ0MsR0FBSixDQUFRdEIsSUFBSSxFQUFaO0FBQ0FxQixJQUFBQSxHQUFHLENBQUNHLEdBQUosQ0FBUSxHQUFSLEVBQWEsS0FBS0MsSUFBTCxDQUFVQyxJQUFWLENBQWUsSUFBZixDQUFiO0FBQ0FMLElBQUFBLEdBQUcsQ0FBQ00sTUFBSixDQUFXO0FBQUVDLE1BQUFBLElBQUksRUFBRSxLQUFLVCxPQUFMLENBQWFTO0FBQXJCLEtBQVgsRUFBd0MsTUFBTTtBQUMxQyxZQUFNQyxHQUFHLEdBQUksb0JBQW1CLEtBQUtWLE9BQUwsQ0FBYVMsSUFBSyxFQUFsRDtBQUNBRSxNQUFBQSxPQUFPLENBQUNDLEtBQVIsQ0FBZSxrQ0FBaUNGLEdBQUksRUFBcEQ7QUFDSCxLQUhEO0FBSUg7O0FBRUQsUUFBTUosSUFBTixDQUFXTyxHQUFYLEVBQXFCQyxHQUFyQixFQUErQjtBQUMzQixRQUFJO0FBQ0EsWUFBTUEsR0FBRyxDQUFDQyxJQUFKLENBQVMvQixhQUFhLENBQUMsTUFBRCxFQUFTLEtBQUtlLEdBQWQsQ0FBdEIsQ0FBTjtBQUNBZSxNQUFBQSxHQUFHLENBQUNFLEdBQUo7QUFDSCxLQUhELENBR0UsT0FBT0MsS0FBUCxFQUFjO0FBQ1pOLE1BQUFBLE9BQU8sQ0FBQ08sR0FBUixDQUFZLDhCQUFaLEVBQTRDRCxLQUE1QztBQUNBLFlBQU1ILEdBQUcsQ0FBQ1YsSUFBSixDQUFTO0FBQ1hlLFFBQUFBLE9BQU8sRUFBRSxLQURFO0FBRVhDLFFBQUFBLEVBQUUsRUFBRSxDQUZPO0FBR1hILFFBQUFBLEtBQUssRUFBRTtBQUNISSxVQUFBQSxJQUFJLEVBQUVDLE1BQU0sQ0FBQ0MsUUFBUCxDQUFnQk4sS0FBSyxJQUFJQSxLQUFLLENBQUNJLElBQS9CLEtBQXdDLENBRDNDO0FBRUhHLFVBQUFBLE9BQU8sRUFBRVAsS0FBSyxDQUFDTyxPQUFOLElBQWlCUCxLQUFLLENBQUNRLFFBQU4sRUFGdkI7QUFHSEMsVUFBQUEsSUFBSSxFQUFFVDtBQUhIO0FBSEksT0FBVCxDQUFOO0FBU0g7QUFDSjs7QUFwQ3lCOzs7O0FBdUN2QixlQUFlVSxHQUFmLENBQW1CNUIsR0FBbkIsRUFBNkJDLE9BQTdCLEVBQWtEO0FBQ3JELFFBQU00QixNQUFNLEdBQUcsSUFBSS9CLGdCQUFKLENBQXFCRSxHQUFyQixFQUEwQkMsT0FBMUIsQ0FBZjtBQUNBNEIsRUFBQUEsTUFBTSxDQUFDM0IsS0FBUDtBQUNBLFNBQU8sdUJBQVA7QUFDSCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgMjAxOC0yMDIwIFRPTiBERVYgU09MVVRJT05TIExURC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgU09GVFdBUkUgRVZBTFVBVElPTiBMaWNlbnNlICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcbiAqIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZVxuICogTGljZW5zZSBhdDogaHR0cHM6Ly93d3cudG9uLmRldi9saWNlbnNlc1xuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgVE9OIERFViBzb2Z0d2FyZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKi9cblxuLy8gQGZsb3dcblxuaW1wb3J0IHR5cGUgeyBXZWJPcHRpb25zIH0gZnJvbSBcIi4uL2NsaS9vcHRpb25zXCI7XG5pbXBvcnQgeyBEZXYgfSBmcm9tIFwiLi4vZGV2XCI7XG5pbXBvcnQgeyBpbnB1dExpbmUgfSBmcm9tIFwiLi4vdXRpbHMvdXRpbHNcIjtcblxuY29uc3QgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTtcbmNvbnN0IGNvcnMgPSByZXF1aXJlKCdjb3JzJyk7XG5pbXBvcnQgSGFuZGxlYmFycyBmcm9tICdoYW5kbGViYXJzJztcblxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcblxuZnVuY3Rpb24gYXBwbHlUZW1wbGF0ZShuYW1lOiBzdHJpbmcsIGNvbnRleHQ6IGFueSk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgY29uc3QgdGVtcGxhdGVQYXRoID0gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uJywgJy4uJywgJ3NyYycsICdzZXJ2ZXInLCAndGVtcGxhdGVzJywgYCR7bmFtZX0uaGJzYCk7XG4gICAgY29uc3QgdGVtcGxhdGVUZXh0ID0gZnMucmVhZEZpbGVTeW5jKHRlbXBsYXRlUGF0aCwgeyBlbmNvZGluZzogJ3V0ZjgnIH0pO1xuICAgIGNvbnN0IHRlbXBsYXRlID0gSGFuZGxlYmFycy5jb21waWxlKHRlbXBsYXRlVGV4dCwge1xuICAgICAgICBub0VzY2FwZTogdHJ1ZSxcbiAgICB9KTtcbiAgICByZXR1cm4gdGVtcGxhdGUoY29udGV4dCk7XG59XG5cbmV4cG9ydCBjbGFzcyBUT05EZXZXZWJDb25zb2xlIHtcbiAgICBkZXY6IERldjtcbiAgICBvcHRpb25zOiBXZWJPcHRpb25zO1xuXG4gICAgY29uc3RydWN0b3IoZGV2OiBEZXYsIG9wdGlvbnM6IFdlYk9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5kZXYgPSBkZXY7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuXG4gICAgc3RhcnQoKSB7XG4gICAgICAgIGNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcbiAgICAgICAgYXBwLnVzZShleHByZXNzLmpzb24oKSk7XG4gICAgICAgIGFwcC51c2UoY29ycygpKTtcbiAgICAgICAgYXBwLmdldCgnLycsIHRoaXMubWFpbi5iaW5kKHRoaXMpKTtcbiAgICAgICAgYXBwLmxpc3Rlbih7IHBvcnQ6IHRoaXMub3B0aW9ucy5wb3J0IH0sICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHVyaSA9IGBodHRwOi8vbG9jYWxob3N0OiR7dGhpcy5vcHRpb25zLnBvcnR9YDtcbiAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoYFRPTiBEZXYgV2ViIENvbnNvbGUgc3RhcnRlZCBvbiAke3VyaX1gKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYXN5bmMgbWFpbihyZXE6IGFueSwgcmVzOiBhbnkpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHJlcy5zZW5kKGFwcGx5VGVtcGxhdGUoJ21haW4nLCB0aGlzLmRldikpO1xuICAgICAgICAgICAgcmVzLmVuZCgpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1tXZWIgQ29uc29sZV0gcmVxdWVzdCBmYWlsZWQnLCBlcnJvcik7XG4gICAgICAgICAgICBhd2FpdCByZXMuanNvbih7XG4gICAgICAgICAgICAgICAganNvbnJwYzogJzIuMCcsXG4gICAgICAgICAgICAgICAgaWQ6IDEsXG4gICAgICAgICAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogTnVtYmVyLnBhcnNlSW50KGVycm9yICYmIGVycm9yLmNvZGUpIHx8IDEsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UgfHwgZXJyb3IudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogZXJyb3JcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHdlYihkZXY6IERldiwgb3B0aW9uczogV2ViT3B0aW9ucykge1xuICAgIGNvbnN0IHNlcnZlciA9IG5ldyBUT05EZXZXZWJDb25zb2xlKGRldiwgb3B0aW9ucyk7XG4gICAgc2VydmVyLnN0YXJ0KCk7XG4gICAgcmV0dXJuIGlucHV0TGluZSgpO1xufVxuIl19
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compilersWithNetworks = compilersWithNetworks;
exports.networksOrDefault = networksOrDefault;
exports.networksOrAll = networksOrAll;

var _dev = require("../dev");

var _networks = require("../networks/networks");

/*
 * Copyright 2018-2019 TON DEV SOLUTIONS LTD.
 *
 * Licensed under the SOFTWARE EVALUATION License (the "License"); you may not use
 * this file except in compliance with the License.  You may obtain a copy of the
 * License at: https://www.ton.dev/licenses
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific TON DEV software governing permissions and
 * limitations under the License.
 *
 */
function requiredNetwork(dev, name) {
  var network = dev.networks.find(function (x) {
    return x.name.toLowerCase() === name.toLowerCase();
  });

  if (!network) {
    throw new Error("Network not found: ".concat(name));
  }

  return network;
}

function findNetworks(dev, options) {
  var names = options.networks;

  if (!names) {
    return null;
  }

  if (typeof names === 'boolean') {
    return dev.networks;
  }

  return names.split(',').map(function (name) {
    return requiredNetwork(dev, name.trim());
  });
}

function compilersWithNetworks(dev, options) {
  var compilers = !!options.compilers;
  var networks = findNetworks(dev, options);

  if (!compilers && !networks) {
    compilers = true;
    networks = dev.networks;
  }

  return {
    compilers: compilers,
    networks: networks || []
  };
}

function networksOrDefault(dev, options) {
  return findNetworks(dev, options) || [requiredNetwork(dev, _networks.Network.defaultName)];
}

function networksOrAll(dev, options) {
  return findNetworks(dev, options) || dev.networks;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGkvb3B0aW9ucy5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlZE5ldHdvcmsiLCJkZXYiLCJuYW1lIiwibmV0d29yayIsIm5ldHdvcmtzIiwiZmluZCIsIngiLCJ0b0xvd2VyQ2FzZSIsIkVycm9yIiwiZmluZE5ldHdvcmtzIiwib3B0aW9ucyIsIm5hbWVzIiwic3BsaXQiLCJtYXAiLCJ0cmltIiwiY29tcGlsZXJzV2l0aE5ldHdvcmtzIiwiY29tcGlsZXJzIiwibmV0d29ya3NPckRlZmF1bHQiLCJOZXR3b3JrIiwiZGVmYXVsdE5hbWUiLCJuZXR3b3Jrc09yQWxsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFnQkE7O0FBQ0E7O0FBakJBOzs7Ozs7Ozs7Ozs7OztBQStDQSxTQUFTQSxlQUFULENBQXlCQyxHQUF6QixFQUFtQ0MsSUFBbkMsRUFBMEQ7QUFDdEQsTUFBTUMsT0FBTyxHQUFHRixHQUFHLENBQUNHLFFBQUosQ0FBYUMsSUFBYixDQUFrQixVQUFBQyxDQUFDO0FBQUEsV0FBSUEsQ0FBQyxDQUFDSixJQUFGLENBQU9LLFdBQVAsT0FBeUJMLElBQUksQ0FBQ0ssV0FBTCxFQUE3QjtBQUFBLEdBQW5CLENBQWhCOztBQUNBLE1BQUksQ0FBQ0osT0FBTCxFQUFjO0FBQ1YsVUFBTSxJQUFJSyxLQUFKLDhCQUFnQ04sSUFBaEMsRUFBTjtBQUNIOztBQUNELFNBQU9DLE9BQVA7QUFDSDs7QUFFRCxTQUFTTSxZQUFULENBQXNCUixHQUF0QixFQUFnQ1MsT0FBaEMsRUFBd0U7QUFDcEUsTUFBTUMsS0FBSyxHQUFHRCxPQUFPLENBQUNOLFFBQXRCOztBQUNBLE1BQUksQ0FBQ08sS0FBTCxFQUFZO0FBQ1IsV0FBTyxJQUFQO0FBQ0g7O0FBQ0QsTUFBSSxPQUFPQSxLQUFQLEtBQWlCLFNBQXJCLEVBQWdDO0FBQzVCLFdBQU9WLEdBQUcsQ0FBQ0csUUFBWDtBQUNIOztBQUNELFNBQU9PLEtBQUssQ0FBQ0MsS0FBTixDQUFZLEdBQVosRUFBaUJDLEdBQWpCLENBQXFCLFVBQUFYLElBQUk7QUFBQSxXQUFJRixlQUFlLENBQUNDLEdBQUQsRUFBTUMsSUFBSSxDQUFDWSxJQUFMLEVBQU4sQ0FBbkI7QUFBQSxHQUF6QixDQUFQO0FBQ0g7O0FBRU0sU0FBU0MscUJBQVQsQ0FDSGQsR0FERyxFQUVIUyxPQUZHLEVBR2tCO0FBQ3JCLE1BQUlNLFNBQVMsR0FBRyxDQUFDLENBQUNOLE9BQU8sQ0FBQ00sU0FBMUI7QUFFQSxNQUFJWixRQUFRLEdBQUdLLFlBQVksQ0FBQ1IsR0FBRCxFQUFNUyxPQUFOLENBQTNCOztBQUNBLE1BQUksQ0FBQ00sU0FBRCxJQUFjLENBQUNaLFFBQW5CLEVBQTZCO0FBQ3pCWSxJQUFBQSxTQUFTLEdBQUcsSUFBWjtBQUNBWixJQUFBQSxRQUFRLEdBQUdILEdBQUcsQ0FBQ0csUUFBZjtBQUNIOztBQUNELFNBQU87QUFDSFksSUFBQUEsU0FBUyxFQUFUQSxTQURHO0FBRUhaLElBQUFBLFFBQVEsRUFBRUEsUUFBUSxJQUFJO0FBRm5CLEdBQVA7QUFJSDs7QUFFTSxTQUFTYSxpQkFBVCxDQUEyQmhCLEdBQTNCLEVBQXFDUyxPQUFyQyxFQUEwRTtBQUM3RSxTQUFPRCxZQUFZLENBQUNSLEdBQUQsRUFBTVMsT0FBTixDQUFaLElBQThCLENBQUNWLGVBQWUsQ0FBQ0MsR0FBRCxFQUFNaUIsa0JBQVFDLFdBQWQsQ0FBaEIsQ0FBckM7QUFDSDs7QUFFTSxTQUFTQyxhQUFULENBQXVCbkIsR0FBdkIsRUFBaUNTLE9BQWpDLEVBQXNFO0FBQ3pFLFNBQU9ELFlBQVksQ0FBQ1IsR0FBRCxFQUFNUyxPQUFOLENBQVosSUFBOEJULEdBQUcsQ0FBQ0csUUFBekM7QUFDSCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgMjAxOC0yMDE5IFRPTiBERVYgU09MVVRJT05TIExURC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgU09GVFdBUkUgRVZBTFVBVElPTiBMaWNlbnNlICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcbiAqIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZVxuICogTGljZW5zZSBhdDogaHR0cHM6Ly93d3cudG9uLmRldi9saWNlbnNlc1xuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgVE9OIERFViBzb2Z0d2FyZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKi9cblxuaW1wb3J0IHR5cGUgeyBDb21waWxlcnNXaXRoTmV0d29ya3MgfSBmcm9tIFwiLi4vZGV2XCI7XG5pbXBvcnQgeyBEZXYgfSBmcm9tIFwiLi4vZGV2XCI7XG5pbXBvcnQgeyBOZXR3b3JrIH0gZnJvbSBcIi4uL25ldHdvcmtzL25ldHdvcmtzXCI7XG5cbmV4cG9ydCB0eXBlIE5ldHdvcmtzT3B0aW9ucyA9IHtcbiAgICBuZXR3b3Jrcz86IGJvb2xlYW4gfCBzdHJpbmcsXG59XG5cbmV4cG9ydCB0eXBlIENvbXBpbGVyc09wdGlvbnMgPSB7XG4gICAgY29tcGlsZXJzPzogYm9vbGVhbixcbn1cblxuZXhwb3J0IHR5cGUgQ29tcGlsZXJzV2l0aE5ldHdvcmtzT3B0aW9ucyA9IENvbXBpbGVyc09wdGlvbnMgJiBOZXR3b3Jrc09wdGlvbnM7XG5cbmV4cG9ydCB0eXBlIEluZm9PcHRpb25zID0ge1xuICAgIGF2YWlsYWJsZT86IGJvb2xlYW5cbn1cblxuZXhwb3J0IHR5cGUgU2V0dXBPcHRpb25zID0gQ29tcGlsZXJzV2l0aE5ldHdvcmtzT3B0aW9ucztcblxuZXhwb3J0IHR5cGUgU3RhcnRPcHRpb25zID0gQ29tcGlsZXJzV2l0aE5ldHdvcmtzT3B0aW9ucztcbmV4cG9ydCB0eXBlIFN0b3BPcHRpb25zID0gQ29tcGlsZXJzV2l0aE5ldHdvcmtzT3B0aW9ucztcbmV4cG9ydCB0eXBlIFJlc3RhcnRPcHRpb25zID0gQ29tcGlsZXJzV2l0aE5ldHdvcmtzT3B0aW9ucztcbmV4cG9ydCB0eXBlIFJlY3JlYXRlT3B0aW9ucyA9IENvbXBpbGVyc1dpdGhOZXR3b3Jrc09wdGlvbnM7XG5leHBvcnQgdHlwZSBDbGVhbk9wdGlvbnMgPSBDb21waWxlcnNXaXRoTmV0d29ya3NPcHRpb25zO1xuZXhwb3J0IHR5cGUgVXNlT3B0aW9ucyA9IENvbXBpbGVyc1dpdGhOZXR3b3Jrc09wdGlvbnM7XG5cbmV4cG9ydCB0eXBlIFNldE9wdGlvbnMgPSBOZXR3b3Jrc09wdGlvbnMgJiB7XG4gICAgcG9ydD86IG51bWJlcixcbiAgICBhcmFuZ29Qb3J0PzogbnVtYmVyLFxufVxuXG5mdW5jdGlvbiByZXF1aXJlZE5ldHdvcmsoZGV2OiBEZXYsIG5hbWU6IHN0cmluZyk6IE5ldHdvcmsge1xuICAgIGNvbnN0IG5ldHdvcmsgPSBkZXYubmV0d29ya3MuZmluZCh4ID0+IHgubmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCkpO1xuICAgIGlmICghbmV0d29yaykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5ldHdvcmsgbm90IGZvdW5kOiAke25hbWV9YClcbiAgICB9XG4gICAgcmV0dXJuIG5ldHdvcms7XG59XG5cbmZ1bmN0aW9uIGZpbmROZXR3b3JrcyhkZXY6IERldiwgb3B0aW9uczogTmV0d29ya3NPcHRpb25zKTogPyhOZXR3b3JrW10pIHtcbiAgICBjb25zdCBuYW1lcyA9IG9wdGlvbnMubmV0d29ya3M7XG4gICAgaWYgKCFuYW1lcykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBuYW1lcyA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHJldHVybiBkZXYubmV0d29ya3M7XG4gICAgfVxuICAgIHJldHVybiBuYW1lcy5zcGxpdCgnLCcpLm1hcChuYW1lID0+IHJlcXVpcmVkTmV0d29yayhkZXYsIG5hbWUudHJpbSgpKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21waWxlcnNXaXRoTmV0d29ya3MoXG4gICAgZGV2OiBEZXYsXG4gICAgb3B0aW9uczogQ29tcGlsZXJzV2l0aE5ldHdvcmtzT3B0aW9uc1xuKTogQ29tcGlsZXJzV2l0aE5ldHdvcmtzIHtcbiAgICBsZXQgY29tcGlsZXJzID0gISFvcHRpb25zLmNvbXBpbGVycztcblxuICAgIGxldCBuZXR3b3JrcyA9IGZpbmROZXR3b3JrcyhkZXYsIG9wdGlvbnMpO1xuICAgIGlmICghY29tcGlsZXJzICYmICFuZXR3b3Jrcykge1xuICAgICAgICBjb21waWxlcnMgPSB0cnVlO1xuICAgICAgICBuZXR3b3JrcyA9IGRldi5uZXR3b3JrcztcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY29tcGlsZXJzLFxuICAgICAgICBuZXR3b3JrczogbmV0d29ya3MgfHwgW11cbiAgICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmV0d29ya3NPckRlZmF1bHQoZGV2OiBEZXYsIG9wdGlvbnM6IE5ldHdvcmtzT3B0aW9ucyk6IE5ldHdvcmtbXSB7XG4gICAgcmV0dXJuIGZpbmROZXR3b3JrcyhkZXYsIG9wdGlvbnMpIHx8IFtyZXF1aXJlZE5ldHdvcmsoZGV2LCBOZXR3b3JrLmRlZmF1bHROYW1lKV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBuZXR3b3Jrc09yQWxsKGRldjogRGV2LCBvcHRpb25zOiBOZXR3b3Jrc09wdGlvbnMpOiBOZXR3b3JrW10ge1xuICAgIHJldHVybiBmaW5kTmV0d29ya3MoZGV2LCBvcHRpb25zKSB8fCBkZXYubmV0d29ya3M7XG59XG5cbiJdfQ==
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compilersWithNetworks = compilersWithNetworks;

var _dev = require("../dev");

var _networks = require("../networks/networks");

/*
 * Copyright 2018-2020 TON DEV SOLUTIONS LTD.
 *
 * Licensed under the SOFTWARE EVALUATION License (the "License"); you may not use
 * this file except in compliance with the License.  You may obtain a copy of the
 * License at: https://www.ton.dev/licenses
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific TON DEV software governing permissions and
 * limitations under the License.
 *
 */
function findNetworks(dev, options) {
  const names = options.networks;

  if (!names) {
    return null;
  }

  if (typeof names === 'boolean') {
    return dev.networks;
  }

  return dev.networksFromNames(names.split(','));
}

function compilersWithNetworks(dev, options) {
  let compilers = !!options.compilers;
  let networks = findNetworks(dev, options);

  if (!compilers && !networks) {
    compilers = true;
    networks = dev.networks;
  }

  return {
    compilers,
    networks: networks || []
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGkvb3B0aW9ucy5qcyJdLCJuYW1lcyI6WyJmaW5kTmV0d29ya3MiLCJkZXYiLCJvcHRpb25zIiwibmFtZXMiLCJuZXR3b3JrcyIsIm5ldHdvcmtzRnJvbU5hbWVzIiwic3BsaXQiLCJjb21waWxlcnNXaXRoTmV0d29ya3MiLCJjb21waWxlcnMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFnQkE7O0FBQ0E7O0FBakJBOzs7Ozs7Ozs7Ozs7OztBQThEQSxTQUFTQSxZQUFULENBQXNCQyxHQUF0QixFQUFnQ0MsT0FBaEMsRUFBd0U7QUFDcEUsUUFBTUMsS0FBSyxHQUFHRCxPQUFPLENBQUNFLFFBQXRCOztBQUNBLE1BQUksQ0FBQ0QsS0FBTCxFQUFZO0FBQ1IsV0FBTyxJQUFQO0FBQ0g7O0FBQ0QsTUFBSSxPQUFPQSxLQUFQLEtBQWlCLFNBQXJCLEVBQWdDO0FBQzVCLFdBQU9GLEdBQUcsQ0FBQ0csUUFBWDtBQUNIOztBQUNELFNBQU9ILEdBQUcsQ0FBQ0ksaUJBQUosQ0FBc0JGLEtBQUssQ0FBQ0csS0FBTixDQUFZLEdBQVosQ0FBdEIsQ0FBUDtBQUNIOztBQUVNLFNBQVNDLHFCQUFULENBQ0hOLEdBREcsRUFFSEMsT0FGRyxFQUdrQjtBQUNyQixNQUFJTSxTQUFTLEdBQUcsQ0FBQyxDQUFDTixPQUFPLENBQUNNLFNBQTFCO0FBRUEsTUFBSUosUUFBUSxHQUFHSixZQUFZLENBQUNDLEdBQUQsRUFBTUMsT0FBTixDQUEzQjs7QUFDQSxNQUFJLENBQUNNLFNBQUQsSUFBYyxDQUFDSixRQUFuQixFQUE2QjtBQUN6QkksSUFBQUEsU0FBUyxHQUFHLElBQVo7QUFDQUosSUFBQUEsUUFBUSxHQUFHSCxHQUFHLENBQUNHLFFBQWY7QUFDSDs7QUFDRCxTQUFPO0FBQ0hJLElBQUFBLFNBREc7QUFFSEosSUFBQUEsUUFBUSxFQUFFQSxRQUFRLElBQUk7QUFGbkIsR0FBUDtBQUlIIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDE4LTIwMjAgVE9OIERFViBTT0xVVElPTlMgTFRELlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBTT0ZUV0FSRSBFVkFMVUFUSU9OIExpY2Vuc2UgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZVxuICogdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlXG4gKiBMaWNlbnNlIGF0OiBodHRwczovL3d3dy50b24uZGV2L2xpY2Vuc2VzXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBUT04gREVWIHNvZnR3YXJlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xuXG5pbXBvcnQgdHlwZSB7IENvbXBpbGVyc1dpdGhOZXR3b3JrcyB9IGZyb20gXCIuLi9kZXZcIjtcbmltcG9ydCB7IERldiB9IGZyb20gXCIuLi9kZXZcIjtcbmltcG9ydCB7IE5ldHdvcmsgfSBmcm9tIFwiLi4vbmV0d29ya3MvbmV0d29ya3NcIjtcblxuZXhwb3J0IHR5cGUgTmV0d29ya3NPcHRpb25zID0ge1xuICAgIG5ldHdvcmtzPzogYm9vbGVhbiB8IHN0cmluZyxcbn1cblxuZXhwb3J0IHR5cGUgQ29tcGlsZXJzT3B0aW9ucyA9IHtcbiAgICBjb21waWxlcnM/OiBib29sZWFuLFxufVxuXG5leHBvcnQgdHlwZSBDb21waWxlcnNXaXRoTmV0d29ya3NPcHRpb25zID0gQ29tcGlsZXJzT3B0aW9ucyAmIE5ldHdvcmtzT3B0aW9ucztcblxuZXhwb3J0IHR5cGUgSW5mb09wdGlvbnMgPSB7XG4gICAgYXZhaWxhYmxlPzogYm9vbGVhblxufVxuXG5leHBvcnQgdHlwZSBTZXR1cE9wdGlvbnMgPSBDb21waWxlcnNXaXRoTmV0d29ya3NPcHRpb25zO1xuXG5leHBvcnQgdHlwZSBTdGFydE9wdGlvbnMgPSBDb21waWxlcnNXaXRoTmV0d29ya3NPcHRpb25zO1xuZXhwb3J0IHR5cGUgU3RvcE9wdGlvbnMgPSBDb21waWxlcnNXaXRoTmV0d29ya3NPcHRpb25zO1xuZXhwb3J0IHR5cGUgUmVzdGFydE9wdGlvbnMgPSBDb21waWxlcnNXaXRoTmV0d29ya3NPcHRpb25zO1xuZXhwb3J0IHR5cGUgUmVjcmVhdGVPcHRpb25zID0gQ29tcGlsZXJzV2l0aE5ldHdvcmtzT3B0aW9ucztcbmV4cG9ydCB0eXBlIENsZWFuT3B0aW9ucyA9IHtcbiAgICBuZXR3b3JrczogYm9vbGVhbixcbiAgICBjb21waWxlcnM6IGJvb2xlYW4sXG4gICAgY29udGFpbmVyczogYm9vbGVhbixcbn1cblxuZXhwb3J0IHR5cGUgVXNlT3B0aW9ucyA9IENvbXBpbGVyc1dpdGhOZXR3b3Jrc09wdGlvbnM7XG5leHBvcnQgdHlwZSBTZXROZXR3b3JrT3B0aW9ucyA9IHtcbiAgICBuZXdOYW1lPzogc3RyaW5nO1xuICAgIHBvcnQ/OiBzdHJpbmcsXG4gICAgZGJQb3J0Pzogc3RyaW5nLFxufVxuXG5leHBvcnQgdHlwZSBTb2xPcHRpb25zID0ge1xuICAgIGNsaWVudExhbmd1YWdlcz86IHN0cmluZyxcbiAgICBjbGllbnRMZXZlbD86IHN0cmluZyxcbiAgICBqc01vZHVsZT86IHN0cmluZyxcbn1cblxuZXhwb3J0IHR5cGUgV2ViT3B0aW9ucyA9IHtcbiAgICBwb3J0OiBzdHJpbmcsXG59XG5cbmZ1bmN0aW9uIGZpbmROZXR3b3JrcyhkZXY6IERldiwgb3B0aW9uczogTmV0d29ya3NPcHRpb25zKTogPyhOZXR3b3JrW10pIHtcbiAgICBjb25zdCBuYW1lcyA9IG9wdGlvbnMubmV0d29ya3M7XG4gICAgaWYgKCFuYW1lcykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBuYW1lcyA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHJldHVybiBkZXYubmV0d29ya3M7XG4gICAgfVxuICAgIHJldHVybiBkZXYubmV0d29ya3NGcm9tTmFtZXMobmFtZXMuc3BsaXQoJywnKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21waWxlcnNXaXRoTmV0d29ya3MoXG4gICAgZGV2OiBEZXYsXG4gICAgb3B0aW9uczogQ29tcGlsZXJzV2l0aE5ldHdvcmtzT3B0aW9uc1xuKTogQ29tcGlsZXJzV2l0aE5ldHdvcmtzIHtcbiAgICBsZXQgY29tcGlsZXJzID0gISFvcHRpb25zLmNvbXBpbGVycztcblxuICAgIGxldCBuZXR3b3JrcyA9IGZpbmROZXR3b3JrcyhkZXYsIG9wdGlvbnMpO1xuICAgIGlmICghY29tcGlsZXJzICYmICFuZXR3b3Jrcykge1xuICAgICAgICBjb21waWxlcnMgPSB0cnVlO1xuICAgICAgICBuZXR3b3JrcyA9IGRldi5uZXR3b3JrcztcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY29tcGlsZXJzLFxuICAgICAgICBuZXR3b3JrczogbmV0d29ya3MgfHwgW11cbiAgICB9O1xufVxuXG4iXX0=
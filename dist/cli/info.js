"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.infoCommand = infoCommand;

var _compilers = require("../compilers/compilers");

var _dev = require("../dev");

var _networks = require("../networks/networks");

var _texts = require("../utils/texts");

var _utils = require("../utils/utils");

/*
 * Copyright 2018-2020 TON DEV SOLUTIONS LTD.
 *
 * Licensed under the SOFTWARE EVALUATION License (the "License"); you may not use
 * this file except in compliance with the License.  You may obtain a copy of the
 * License at: https://www.ton.dev/licenses
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific TON DEV software governing permissions and
 * limitations under the License.
 *
 */
async function infoCommand(dev, options) {
  async function listTags(image) {
    const url = `https://registry.hub.docker.com/v2/repositories/${image}/tags/`;
    const tags = await (0, _utils.httpsGetJson)(url);
    return tags.results.map(x => x.name).sort();
  }

  async function showAvailableVersions(imagePrefix) {
    console.log(`  ${imagePrefix}: ${(await listTags(imagePrefix)).join(', ')}`);
  }

  function mapContainerName(name) {
    return name.startsWith('/') ? name.substr(1) : name;
  }

  async function showContainerInfo(name) {
    const info = await dev.docker.findContainerInfo(name);

    if (info) {
      console.log(`  Docker image: ${info.Image}`);
      console.log(`  Docker container: ${info.Names.map(mapContainerName).join(', ')} ${info.State}`);
    } else {
      console.log(`  Docker container missing: ${name}`);
    }
  }

  console.log(_texts.texts.usageHeader(_utils.version));

  for (let i = 0; i < dev.networks.length; i += 1) {
    const network = dev.networks[i];
    console.log();
    console.log(_texts.texts.netHeader(network.name));
    console.log();
    console.log(_texts.texts.usedVersion(network.version));
    console.log(_texts.texts.netHostPort(network.hostPort));

    if (network.arangoHostPort !== '') {
      console.log(_texts.texts.netArangoHostPort(network.arangoHostPort));
    }

    await showContainerInfo(network.containerName);
  }

  console.log();
  console.log(_texts.texts.compilerHeader);
  console.log();
  console.log(_texts.texts.usedVersion(dev.compilers.version));
  await showContainerInfo(dev.compilers.containerName);

  if (options.available) {
    console.log();
    console.log(_texts.texts.availableVersions);
    console.log();
    await showAvailableVersions(_compilers.Compilers.imagePrefix);
    await showAvailableVersions(_networks.Network.imagePrefix);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGkvaW5mby5qcyJdLCJuYW1lcyI6WyJpbmZvQ29tbWFuZCIsImRldiIsIm9wdGlvbnMiLCJsaXN0VGFncyIsImltYWdlIiwidXJsIiwidGFncyIsInJlc3VsdHMiLCJtYXAiLCJ4IiwibmFtZSIsInNvcnQiLCJzaG93QXZhaWxhYmxlVmVyc2lvbnMiLCJpbWFnZVByZWZpeCIsImNvbnNvbGUiLCJsb2ciLCJqb2luIiwibWFwQ29udGFpbmVyTmFtZSIsInN0YXJ0c1dpdGgiLCJzdWJzdHIiLCJzaG93Q29udGFpbmVySW5mbyIsImluZm8iLCJkb2NrZXIiLCJmaW5kQ29udGFpbmVySW5mbyIsIkltYWdlIiwiTmFtZXMiLCJTdGF0ZSIsInRleHRzIiwidXNhZ2VIZWFkZXIiLCJ2ZXJzaW9uIiwiaSIsIm5ldHdvcmtzIiwibGVuZ3RoIiwibmV0d29yayIsIm5ldEhlYWRlciIsInVzZWRWZXJzaW9uIiwibmV0SG9zdFBvcnQiLCJob3N0UG9ydCIsImFyYW5nb0hvc3RQb3J0IiwibmV0QXJhbmdvSG9zdFBvcnQiLCJjb250YWluZXJOYW1lIiwiY29tcGlsZXJIZWFkZXIiLCJjb21waWxlcnMiLCJhdmFpbGFibGUiLCJhdmFpbGFibGVWZXJzaW9ucyIsIkNvbXBpbGVycyIsIk5ldHdvcmsiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFpQkE7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBdEJBOzs7Ozs7Ozs7Ozs7OztBQXlCTyxlQUFlQSxXQUFmLENBQTJCQyxHQUEzQixFQUFxQ0MsT0FBckMsRUFBMkQ7QUFDOUQsaUJBQWVDLFFBQWYsQ0FBd0JDLEtBQXhCLEVBQTBEO0FBQ3RELFVBQU1DLEdBQUcsR0FBSSxtREFBa0RELEtBQU0sUUFBckU7QUFDQSxVQUFNRSxJQUFJLEdBQUcsTUFBTSx5QkFBYUQsR0FBYixDQUFuQjtBQUNBLFdBQU9DLElBQUksQ0FBQ0MsT0FBTCxDQUFhQyxHQUFiLENBQWlCQyxDQUFDLElBQUlBLENBQUMsQ0FBQ0MsSUFB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QTlCLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUjtBQUNBLFVBQU1ILHFCQUFxQixDQUFDaUMscUJBQVVoQyxXQUFYLENBQTNCO0FBQ0EsVUFBTUQscUJBQXFCLENBQUNrQyxrQkFBUWpDLFdBQVQsQ0FBM0I7QUFDSDtBQUNKIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDE4LTIwMjAgVE9OIERFViBTT0xVVElPTlMgTFRELlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBTT0ZUV0FSRSBFVkFMVUFUSU9OIExpY2Vuc2UgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZVxuICogdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlXG4gKiBMaWNlbnNlIGF0OiBodHRwczovL3d3dy50b24uZGV2L2xpY2Vuc2VzXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBUT04gREVWIHNvZnR3YXJlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xuLy8gQGZsb3dcblxuXG5pbXBvcnQgeyBDb21waWxlcnMgfSBmcm9tIFwiLi4vY29tcGlsZXJzL2NvbXBpbGVyc1wiO1xuaW1wb3J0IHsgRGV2IH0gZnJvbSBcIi4uL2RldlwiO1xuaW1wb3J0IHsgTmV0d29yayB9IGZyb20gXCIuLi9uZXR3b3Jrcy9uZXR3b3Jrc1wiO1xuaW1wb3J0IHR5cGUgeyBEQ29udGFpbmVySW5mbyB9IGZyb20gXCIuLi91dGlscy9kb2NrZXJcIjtcbmltcG9ydCB7IHRleHRzIH0gZnJvbSBcIi4uL3V0aWxzL3RleHRzXCI7XG5pbXBvcnQgeyBodHRwc0dldEpzb24sIHZlcnNpb24gfSBmcm9tIFwiLi4vdXRpbHMvdXRpbHNcIjtcbmltcG9ydCB0eXBlIHsgSW5mb09wdGlvbnMgfSBmcm9tIFwiLi9vcHRpb25zXCI7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbmZvQ29tbWFuZChkZXY6IERldiwgb3B0aW9uczogSW5mb09wdGlvbnMpIHtcbiAgICBhc3luYyBmdW5jdGlvbiBsaXN0VGFncyhpbWFnZTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgICAgICBjb25zdCB1cmwgPSBgaHR0cHM6Ly9yZWdpc3RyeS5odWIuZG9ja2VyLmNvbS92Mi9yZXBvc2l0b3JpZXMvJHtpbWFnZX0vdGFncy9gO1xuICAgICAgICBjb25zdCB0YWdzID0gYXdhaXQgaHR0cHNHZXRKc29uKHVybCk7XG4gICAgICAgIHJldHVybiB0YWdzLnJlc3VsdHMubWFwKHggPT4geC5uYW1lKS5zb3J0KCk7XG4gICAgfVxuXG4gICAgYXN5bmMgZnVuY3Rpb24gc2hvd0F2YWlsYWJsZVZlcnNpb25zKGltYWdlUHJlZml4OiBzdHJpbmcpIHtcbiAgICAgICAgY29uc29sZS5sb2coYCAgJHtpbWFnZVByZWZpeH06ICR7KGF3YWl0IGxpc3RUYWdzKGltYWdlUHJlZml4KSkuam9pbignLCAnKX1gKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXBDb250YWluZXJOYW1lKG5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBuYW1lLnN0YXJ0c1dpdGgoJy8nKSA/IG5hbWUuc3Vic3RyKDEpIDogbmFtZTtcbiAgICB9XG5cbiAgICBhc3luYyBmdW5jdGlvbiBzaG93Q29udGFpbmVySW5mbyhuYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgaW5mbzogP0RDb250YWluZXJJbmZvID0gYXdhaXQgZGV2LmRvY2tlci5maW5kQ29udGFpbmVySW5mbyhuYW1lKTtcbiAgICAgICAgaWYgKGluZm8pIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGAgIERvY2tlciBpbWFnZTogJHtpbmZvLkltYWdlfWApO1xuICAgICAgICAgICAgY29uc29sZS5sb2coYCAgRG9ja2VyIGNvbnRhaW5lcjogJHtpbmZvLk5hbWVzLm1hcChtYXBDb250YWluZXJOYW1lKS5qb2luKCcsICcpfSAke2luZm8uU3RhdGV9YCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgICBEb2NrZXIgY29udGFpbmVyIG1pc3Npbmc6ICR7bmFtZX1gKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKHRleHRzLnVzYWdlSGVhZGVyKHZlcnNpb24pKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGV2Lm5ldHdvcmtzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IG5ldHdvcmsgPSBkZXYubmV0d29ya3NbaV07XG4gICAgICAgIGNvbnNvbGUubG9nKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKHRleHRzLm5ldEhlYWRlcihuZXR3b3JrLm5hbWUpKTtcbiAgICAgICAgY29uc29sZS5sb2coKTtcbiAgICAgICAgY29uc29sZS5sb2codGV4dHMudXNlZFZlcnNpb24obmV0d29yay52ZXJzaW9uKSk7XG4gICAgICAgIGNvbnNvbGUubG9nKHRleHRzLm5ldEhvc3RQb3J0KG5ldHdvcmsuaG9zdFBvcnQpKTtcbiAgICAgICAgaWYgKG5ldHdvcmsuYXJhbmdvSG9zdFBvcnQgIT09ICcnKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0ZXh0cy5uZXRBcmFuZ29Ib3N0UG9ydChuZXR3b3JrLmFyYW5nb0hvc3RQb3J0KSk7XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgc2hvd0NvbnRhaW5lckluZm8obmV0d29yay5jb250YWluZXJOYW1lKTtcbiAgICB9XG4gICAgY29uc29sZS5sb2coKTtcbiAgICBjb25zb2xlLmxvZyh0ZXh0cy5jb21waWxlckhlYWRlcik7XG4gICAgY29uc29sZS5sb2coKTtcbiAgICBjb25zb2xlLmxvZyh0ZXh0cy51c2VkVmVyc2lvbihkZXYuY29tcGlsZXJzLnZlcnNpb24pKTtcbiAgICBhd2FpdCBzaG93Q29udGFpbmVySW5mbyhkZXYuY29tcGlsZXJzLmNvbnRhaW5lck5hbWUpO1xuXG5cbiAgICBpZiAob3B0aW9ucy5hdmFpbGFibGUpIHtcbiAgICAgICAgY29uc29sZS5sb2coKTtcbiAgICAgICAgY29uc29sZS5sb2codGV4dHMuYXZhaWxhYmxlVmVyc2lvbnMpO1xuICAgICAgICBjb25zb2xlLmxvZygpO1xuICAgICAgICBhd2FpdCBzaG93QXZhaWxhYmxlVmVyc2lvbnMoQ29tcGlsZXJzLmltYWdlUHJlZml4KTtcbiAgICAgICAgYXdhaXQgc2hvd0F2YWlsYWJsZVZlcnNpb25zKE5ldHdvcmsuaW1hZ2VQcmVmaXgpO1xuICAgIH1cbn1cbiJdfQ==
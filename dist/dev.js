"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Dev = void 0;

var _compilers = require("./compilers/compilers");

var _networks = require("./networks/networks");

var _docker = require("./utils/docker");

var _texts = require("./utils/texts");

var _utils = require("./utils/utils");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const fs = require('fs');

const os = require('os');

const path = require('path');

function excludeCompilers(dev, defs) {
  return defs.filter(x => x !== dev.compilers);
}

class Dev {
  constructor() {
    _defineProperty(this, "name", void 0);

    _defineProperty(this, "version", void 0);

    _defineProperty(this, "docker", void 0);

    _defineProperty(this, "networks", void 0);

    _defineProperty(this, "compilers", void 0);

    _defineProperty(this, "agreementRequired", void 0);

    _defineProperty(this, "configFilePath", void 0);

    _defineProperty(this, "onStartupImages", images => {
      this.agreementRequired = !images.find(Dev.isDevImage);
    });

    _defineProperty(this, "onBeforePull", async _repoTag => {
      if (!this.agreementRequired) {
        return;
      }

      const license = fs.readFileSync(path.join(__dirname, '..', 'LICENSE')).toString().split('\n').map(_utils.breakWords).join('\n');
      console.log(license);
      process.stdout.write(_texts.texts.agreementConfirmation);
      const answer = (await (0, _utils.inputLine)()).trim().toLowerCase();

      if (answer !== 'yes') {
        console.log(_texts.texts.agreementRejected);
        process.exit(0);
      }

      console.log(_texts.texts.agreementAccepted);
      this.agreementRequired = false;
    });

    this.name = 'tondev';
    this.version = _utils.version;
    this.agreementRequired = true;
    this.docker = new _docker.DevDocker();
    this.docker.onStartupImages = this.onStartupImages;
    this.docker.onBeforePull = this.onBeforePull;
    this.compilers = new _compilers.Compilers(_compilers.Compilers.defaultConfig);
    this.networks = [new _networks.Network(_networks.Network.defaultConfig)];
    this.configFilePath = (0, _utils.tonlabsHomePath)('config.json');
    fs.mkdirSync((0, _utils.tonlabsHomePath)(), {
      recursive: true
    });
    this.loadConfig();
  }

  loadConfig() {
    try {
      const config = JSON.parse(fs.readFileSync(this.configFilePath, {
        encoding: 'utf8'
      }));
      this.compilers.setConfig(config.compilers);
      this.networks = config.networks.map(x => new _networks.Network(x));
    } catch {}
  }

  saveConfig() {
    const config = {
      compilers: this.compilers.getConfig(),
      networks: this.networks.map(x => x.getConfig())
    };
    fs.mkdirSync((0, _utils.tonlabsHomePath)(''), {
      recursive: true
    });
    fs.writeFileSync(this.configFilePath, JSON.stringify(config), {
      encoding: 'utf8'
    });
  }

  networksFromNames(names) {
    return names.map(name => {
      const network = this.networks.find(x => x.name.toLowerCase() === name.toLowerCase());

      if (!network) {
        throw new Error(`Network not found: ${name}`);
      }

      return network;
    });
  }

  networksOrAll(names) {
    return names.length > 0 ? this.networksFromNames(names) : this.networks;
  }

  getDefs(source) {
    return source.compilers ? source.networks.concat(this.compilers) : [...source.networks];
  }

  async start(source) {
    await this.docker.startupContainers(excludeCompilers(this, this.getDefs(source)), _docker.ContainerStatus.running);
  }

  async stop(source) {
    await this.docker.shutdownContainers(this.getDefs(source), _docker.ContainerStatus.created);
  }

  async restart(source) {
    const defs = this.getDefs(source);
    await this.docker.shutdownContainers(defs, _docker.ContainerStatus.created);
    await this.docker.startupContainers(excludeCompilers(this, defs), _docker.ContainerStatus.running);
  }

  async recreate(source) {
    const defs = this.getDefs(source);
    await this.docker.shutdownContainers(defs, _docker.ContainerStatus.missing);
    await this.docker.startupContainers(excludeCompilers(this, defs), _docker.ContainerStatus.created);
  }

  async clean(compilers, networks, containersOnly) {
    const imageMatches = [];

    if (compilers) {
      imageMatches.push(_compilers.Compilers.imagePrefix);
    }

    if (networks) {
      imageMatches.push(_networks.Network.imagePrefix);
    }

    await this.docker.removeImages(imageMatches, containersOnly);
  }

  async useVersion(version, source) {
    const defs = this.getDefs(source);
    await this.docker.shutdownContainers(defs, _docker.ContainerStatus.missing);

    if (source.compilers) {
      this.compilers.setConfig({ ...this.compilers.getConfig(),
        version
      });
    }

    source.networks.forEach(network => {
      const config = network.getConfig();
      config.version = version;
      network.setConfig(config);
    });
    this.saveConfig();
    await this.docker.startupContainers(excludeCompilers(this, defs), _docker.ContainerStatus.running);
  } // Compilers


  hostPathToMountSource(hostPath) {
    if (os.platform() !== 'win32') {
      return hostPath.toLowerCase();
    }

    return `/host_mnt/${hostPath.replace(/:\\|\\/g, '/').toLowerCase()}`;
  }

  async getCompilersMountedTo(hostPath) {
    let info = (await this.docker.getContainerInfos()).find(info => {
      return _docker.DevDocker.containersImageMatched(info, this.compilers.requiredImage) && info.Mounts.find(mount => mount.Source.toLowerCase() === this.hostPathToMountSource(hostPath));
    });
    let container;

    if (info) {
      container = this.docker.client.getContainer(info.Id);

      if (!_docker.DevDocker.isRunning(info)) {
        await container.start();
      }
    } else {
      container = await this.compilers.createContainerMountedTo(hostPath, this.docker);
      await container.start();
    }

    return {
      container,
      guestPath: (0, _utils.bindPathJoinTo)(this.compilers.mountDestination, '/')
    };
  } // Networks


  ensureNetwork(name) {
    const existing = this.networks.find(x => x.name.toLowerCase() === name.toLowerCase());

    if (existing) {
      return existing;
    }

    const network = new _networks.Network({ ..._networks.Network.defaultConfig,
      name
    });
    this.networks.push(network);
    return network;
  }

  checkUniqueName(name) {
    if (this.networks.find(x => x.name.toLowerCase() === name.toLowerCase())) {
      throw new Error(`Network with name [${name}] already exists`);
    }
  }

  addNetworks(names) {
    names.forEach(name => {
      this.checkUniqueName(name);
      const network = new _networks.Network({ ..._networks.Network.defaultConfig,
        name
      });
      this.networks.push(network);
    });
    this.saveConfig();
  }

  async removeNetworks(networks) {
    await this.docker.shutdownContainers(networks, _docker.ContainerStatus.missing);
    networks.forEach(network => {
      const index = this.networks.findIndex(x => x === network);

      if (index >= 0) {
        this.networks.splice(index, 1);
      }
    });
    this.saveConfig();
  }

  async updateNetworkConfigs(networks, update) {
    const defs = [...networks];
    await this.docker.shutdownContainers(defs, _docker.ContainerStatus.missing);
    networks.forEach(network => {
      const config = network.getConfig();
      const saveName = config.name;
      update(config);

      if (config.name.toLowerCase() !== saveName.toLowerCase()) {
        this.checkUniqueName(config.name);
      }

      network.setConfig(config);
    });
    this.saveConfig();
    await this.docker.startupContainers(defs, _docker.ContainerStatus.running);
  }

  static isDevContainer(info) {
    return _docker.DevDocker.containersImageMatched(info, _compilers.Compilers.imagePrefix) || _docker.DevDocker.containersImageMatched(info, _networks.Network.imagePrefix);
  }

  static isDevImage(info) {
    return _docker.DevDocker.imageHasMatchedName(info, _compilers.Compilers.imagePrefix) || _docker.DevDocker.imageHasMatchedName(info, _networks.Network.imagePrefix);
  }

}

exports.Dev = Dev;

_defineProperty(Dev, "defaultConfig", Object.freeze({
  compilers: _compilers.Compilers.defaultConfig,
  networks: [_networks.Network.defaultConfig]
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updatePreferences = updatePreferences;
exports.defaults = exports.preferences = exports.config = void 0;

/*
 * Copyright 2018-2019 TON DEV SOLUTIONS LTD.
 *
 * Licensed under the SOFTWARE EVALUATION License (the "License"); you may not use
 * this file except in compliance with the License.  You may obtain a copy of the
 * License at: https://www.ton.dev/licenses
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific TON DEV software governing permissions and
 * limitations under the License.
 *
 */
var path = require('path');

var os = require('os');

var fs = require('fs');

var tonlabsHome = path.join(os.homedir(), '.tonlabs');
var defaults = {
  localNodeImageFamily: 'tonlabs/local-node',
  compilersImageFamily: 'tonlabs/compilers',
  localNodeArangoHostPort: '8529'
};
exports.defaults = defaults;
var preferences = {
  version: 'latest',
  localNodeHostPort: '80',
  localNodeArangoHostPort: ''
};
exports.preferences = preferences;

function preferencesFilePath() {
  return path.join(tonlabsHome, 'preferences.json');
}

function readPreferences() {
  try {
    var read = JSON.parse(fs.readFileSync(preferencesFilePath(), {
      encoding: 'utf8'
    }));
    Object.assign(preferences, read);
  } catch (_unused) {}
}

readPreferences();
var user = os.userInfo().username;
var config = {
  auth: {
    authconfig: {
      username: process.env.TONDEV_DH_USER,
      password: process.env.TONDEV_DH_PASSWORD
    }
  },
  localNode: {
    image: "".concat(defaults.localNodeImageFamily, ":").concat(preferences.version),
    container: "tonlabs-local-node-".concat(user),
    hostPort: preferences.localNodeHostPort
  },
  compilers: {
    image: "".concat(defaults.compilersImageFamily, ":").concat(preferences.version),
    container: "tonlabs-compilers-".concat(user),
    mountSource: path.join(tonlabsHome, 'compilers', 'projects'),
    mountDestination: '/projects'
  }
};
exports.config = config;

function updatePreferences() {
  fs.writeFileSync(preferencesFilePath(), JSON.stringify(preferences), {
    encoding: 'utf8'
  });
  config.localNode.image = "".concat(defaults.localNodeImageFamily, ":").concat(preferences.version);
  config.compilers.image = "".concat(defaults.compilersImageFamily, ":").concat(preferences.version);
  config.localNode.hostPort = preferences.localNodeHostPort;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb25maWcuanMiXSwibmFtZXMiOlsicGF0aCIsInJlcXVpcmUiLCJvcyIsImZzIiwidG9ubGFic0hvbWUiLCJqb2luIiwiaG9tZWRpciIsImRlZmF1bHRzIiwibG9jYWxOb2RlSW1hZ2VGYW1pbHkiLCJjb21waWxlcnNJbWFnZUZhbWlseSIsImxvY2FsTm9kZUFyYW5nb0hvc3RQb3J0IiwicHJlZmVyZW5jZXMiLCJ2ZXJzaW9uIiwibG9jYWxOb2RlSG9zdFBvcnQiLCJwcmVmZXJlbmNlc0ZpbGVQYXRoIiwicmVhZFByZWZlcmVuY2VzIiwicmVhZCIsIkpTT04iLCJwYXJzZSIsInJlYWRGaWxlU3luYyIsImVuY29kaW5nIiwiT2JqZWN0IiwiYXNzaWduIiwidXNlciIsInVzZXJJbmZvIiwidXNlcm5hbWUiLCJjb25maWciLCJhdXRoIiwiYXV0aGNvbmZpZyIsInByb2Nlc3MiLCJlbnYiLCJUT05ERVZfREhfVVNFUiIsInBhc3N3b3JkIiwiVE9OREVWX0RIX1BBU1NXT1JEIiwibG9jYWxOb2RlIiwiaW1hZ2UiLCJjb250YWluZXIiLCJob3N0UG9ydCIsImNvbXBpbGVycyIsIm1vdW50U291cmNlIiwibW91bnREZXN0aW5hdGlvbiIsInVwZGF0ZVByZWZlcmVuY2VzIiwid3JpdGVGaWxlU3luYyIsInN0cmluZ2lmeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7QUFnQkEsSUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxJQUFNQyxFQUFFLEdBQUdELE9BQU8sQ0FBQyxJQUFELENBQWxCOztBQUNBLElBQU1FLEVBQUUsR0FBR0YsT0FBTyxDQUFDLElBQUQsQ0FBbEI7O0FBRUEsSUFBTUcsV0FBVyxHQUFHSixJQUFJLENBQUNLLElBQUwsQ0FBVUgsRUFBRSxDQUFDSSxPQUFILEVBQVYsRUFBd0IsVUFBeEIsQ0FBcEI7QUFFQSxJQUFNQyxRQUFRLEdBQUc7QUFDYkMsRUFBQUEsb0JBQW9CLEVBQUUsb0JBRFQ7QUFFYkMsRUFBQUEsb0JBQW9CLEVBQUUsbUJBRlQ7QUFHYkMsRUFBQUEsdUJBQXVCLEVBQUU7QUFIWixDQUFqQjs7QUFNQSxJQUFNQyxXQUFXLEdBQUc7QUFDaEJDLEVBQUFBLE9BQU8sRUFBRSxRQURPO0FBRWhCQyxFQUFBQSxpQkFBaUIsRUFBRSxJQUZIO0FBR2hCSCxFQUFBQSx1QkFBdUIsRUFBRTtBQUhULENBQXBCOzs7QUFNQSxTQUFTSSxtQkFBVCxHQUErQjtBQUMzQixTQUFPZCxJQUFJLENBQUNLLElBQUwsQ0FBVUQsV0FBVixFQUF1QixrQkFBdkIsQ0FBUDtBQUNIOztBQUVELFNBQVNXLGVBQVQsR0FBMkI7QUFDdkIsTUFBSTtBQUNBLFFBQU1DLElBQUksR0FBR0MsSUFBSSxDQUFDQyxLQUFMLENBQ1RmLEVBQUUsQ0FBQ2dCLFlBQUgsQ0FBZ0JMLG1CQUFtQixFQUFuQyxFQUF1QztBQUFFTSxNQUFBQSxRQUFRLEVBQUU7QUFBWixLQUF2QyxDQURTLENBQWI7QUFHQUMsSUFBQUEsTUFBTSxDQUFDQyxNQUFQLENBQWNYLFdBQWQsRUFBMkJLLElBQTNCO0FBQ0gsR0FMRCxDQUtFLGdCQUFNLENBQ1A7QUFDSjs7QUFJREQsZUFBZTtBQUVmLElBQU1RLElBQUksR0FBR3JCLEVBQUUsQ0FBQ3NCLFFBQUgsR0FBY0MsUUFBM0I7QUFFQSxJQUFNQyxNQUFNLEdBQUc7QUFDWEMsRUFBQUEsSUFBSSxFQUFFO0FBQ0ZDLElBQUFBLFVBQVUsRUFBRTtBQUNSSCxNQUFBQSxRQUFRLEVBQUVJLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxjQURkO0FBRVJDLE1BQUFBLFFBQVEsRUFBRUgsT0FBTyxDQUFDQyxHQUFSLENBQVlHO0FBRmQ7QUFEVixHQURLO0FBT1hDLEVBQUFBLFNBQVMsRUFBRTtBQUNQQyxJQUFBQSxLQUFLLFlBQUs1QixRQUFRLENBQUNDLG9CQUFkLGNBQXNDRyxXQUFXLENBQUNDLE9BQWxELENBREU7QUFFUHdCLElBQUFBLFNBQVMsK0JBQXdCYixJQUF4QixDQUZGO0FBR1BjLElBQUFBLFFBQVEsRUFBRTFCLFdBQVcsQ0FBQ0U7QUFIZixHQVBBO0FBWVh5QixFQUFBQSxTQUFTLEVBQUU7QUFDUEgsSUFBQUEsS0FBSyxZQUFLNUIsUUFBUSxDQUFDRSxvQkFBZCxjQUFzQ0UsV0FBVyxDQUFDQyxPQUFsRCxDQURFO0FBRVB3QixJQUFBQSxTQUFTLDhCQUF1QmIsSUFBdkIsQ0FGRjtBQUdQZ0IsSUFBQUEsV0FBVyxFQUFFdkMsSUFBSSxDQUFDSyxJQUFMLENBQVVELFdBQVYsRUFBdUIsV0FBdkIsRUFBb0MsVUFBcEMsQ0FITjtBQUlQb0MsSUFBQUEsZ0JBQWdCLEVBQUU7QUFKWDtBQVpBLENBQWY7OztBQXFCQSxTQUFTQyxpQkFBVCxHQUE2QjtBQUN6QnRDLEVBQUFBLEVBQUUsQ0FBQ3VDLGFBQUgsQ0FDSTVCLG1CQUFtQixFQUR2QixFQUVJRyxJQUFJLENBQUMwQixTQUFMLENBQWVoQyxXQUFmLENBRkosRUFHSTtBQUFFUyxJQUFBQSxRQUFRLEVBQUU7QUFBWixHQUhKO0FBS0FNLEVBQUFBLE1BQU0sQ0FBQ1EsU0FBUCxDQUFpQkMsS0FBakIsYUFBNEI1QixRQUFRLENBQUNDLG9CQUFyQyxjQUE2REcsV0FBVyxDQUFDQyxPQUF6RTtBQUNBYyxFQUFBQSxNQUFNLENBQUNZLFNBQVAsQ0FBaUJILEtBQWpCLGFBQTRCNUIsUUFBUSxDQUFDRSxvQkFBckMsY0FBNkRFLFdBQVcsQ0FBQ0MsT0FBekU7QUFDQWMsRUFBQUEsTUFBTSxDQUFDUSxTQUFQLENBQWlCRyxRQUFqQixHQUE0QjFCLFdBQVcsQ0FBQ0UsaUJBQXhDO0FBQ0giLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMTgtMjAxOSBUT04gREVWIFNPTFVUSU9OUyBMVEQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIFNPRlRXQVJFIEVWQUxVQVRJT04gTGljZW5zZSAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXG4gKiB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcbiAqIExpY2Vuc2UgYXQ6IGh0dHBzOi8vd3d3LnRvbi5kZXYvbGljZW5zZXNcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIFRPTiBERVYgc29mdHdhcmUgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG4vLyBAZmxvd1xuXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3Qgb3MgPSByZXF1aXJlKCdvcycpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuXG5jb25zdCB0b25sYWJzSG9tZSA9IHBhdGguam9pbihvcy5ob21lZGlyKCksICcudG9ubGFicycpO1xuXG5jb25zdCBkZWZhdWx0cyA9IHtcbiAgICBsb2NhbE5vZGVJbWFnZUZhbWlseTogJ3RvbmxhYnMvbG9jYWwtbm9kZScsXG4gICAgY29tcGlsZXJzSW1hZ2VGYW1pbHk6ICd0b25sYWJzL2NvbXBpbGVycycsXG4gICAgbG9jYWxOb2RlQXJhbmdvSG9zdFBvcnQ6ICc4NTI5Jyxcbn07XG5cbmNvbnN0IHByZWZlcmVuY2VzID0ge1xuICAgIHZlcnNpb246ICdsYXRlc3QnLFxuICAgIGxvY2FsTm9kZUhvc3RQb3J0OiAnODAnLFxuICAgIGxvY2FsTm9kZUFyYW5nb0hvc3RQb3J0OiAnJyxcbn07XG5cbmZ1bmN0aW9uIHByZWZlcmVuY2VzRmlsZVBhdGgoKSB7XG4gICAgcmV0dXJuIHBhdGguam9pbih0b25sYWJzSG9tZSwgJ3ByZWZlcmVuY2VzLmpzb24nKTtcbn1cblxuZnVuY3Rpb24gcmVhZFByZWZlcmVuY2VzKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlYWQgPSBKU09OLnBhcnNlKFxuICAgICAgICAgICAgZnMucmVhZEZpbGVTeW5jKHByZWZlcmVuY2VzRmlsZVBhdGgoKSwgeyBlbmNvZGluZzogJ3V0ZjgnIH0pXG4gICAgICAgICk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24ocHJlZmVyZW5jZXMsIHJlYWQpO1xuICAgIH0gY2F0Y2gge1xuICAgIH1cbn1cblxuXG5cbnJlYWRQcmVmZXJlbmNlcygpO1xuXG5jb25zdCB1c2VyID0gb3MudXNlckluZm8oKS51c2VybmFtZTtcblxuY29uc3QgY29uZmlnID0ge1xuICAgIGF1dGg6IHtcbiAgICAgICAgYXV0aGNvbmZpZzoge1xuICAgICAgICAgICAgdXNlcm5hbWU6IHByb2Nlc3MuZW52LlRPTkRFVl9ESF9VU0VSLFxuICAgICAgICAgICAgcGFzc3dvcmQ6IHByb2Nlc3MuZW52LlRPTkRFVl9ESF9QQVNTV09SRCxcbiAgICAgICAgfVxuICAgIH0sXG4gICAgbG9jYWxOb2RlOiB7XG4gICAgICAgIGltYWdlOiBgJHtkZWZhdWx0cy5sb2NhbE5vZGVJbWFnZUZhbWlseX06JHtwcmVmZXJlbmNlcy52ZXJzaW9ufWAsXG4gICAgICAgIGNvbnRhaW5lcjogYHRvbmxhYnMtbG9jYWwtbm9kZS0ke3VzZXJ9YCxcbiAgICAgICAgaG9zdFBvcnQ6IHByZWZlcmVuY2VzLmxvY2FsTm9kZUhvc3RQb3J0LFxuICAgIH0sXG4gICAgY29tcGlsZXJzOiB7XG4gICAgICAgIGltYWdlOiBgJHtkZWZhdWx0cy5jb21waWxlcnNJbWFnZUZhbWlseX06JHtwcmVmZXJlbmNlcy52ZXJzaW9ufWAsXG4gICAgICAgIGNvbnRhaW5lcjogYHRvbmxhYnMtY29tcGlsZXJzLSR7dXNlcn1gLFxuICAgICAgICBtb3VudFNvdXJjZTogcGF0aC5qb2luKHRvbmxhYnNIb21lLCAnY29tcGlsZXJzJywgJ3Byb2plY3RzJyksXG4gICAgICAgIG1vdW50RGVzdGluYXRpb246ICcvcHJvamVjdHMnLFxuXG4gICAgfVxufTtcblxuZnVuY3Rpb24gdXBkYXRlUHJlZmVyZW5jZXMoKSB7XG4gICAgZnMud3JpdGVGaWxlU3luYyhcbiAgICAgICAgcHJlZmVyZW5jZXNGaWxlUGF0aCgpLFxuICAgICAgICBKU09OLnN0cmluZ2lmeShwcmVmZXJlbmNlcyksXG4gICAgICAgIHsgZW5jb2Rpbmc6ICd1dGY4JyB9XG4gICAgKTtcbiAgICBjb25maWcubG9jYWxOb2RlLmltYWdlID0gYCR7ZGVmYXVsdHMubG9jYWxOb2RlSW1hZ2VGYW1pbHl9OiR7cHJlZmVyZW5jZXMudmVyc2lvbn1gO1xuICAgIGNvbmZpZy5jb21waWxlcnMuaW1hZ2UgPSBgJHtkZWZhdWx0cy5jb21waWxlcnNJbWFnZUZhbWlseX06JHtwcmVmZXJlbmNlcy52ZXJzaW9ufWA7XG4gICAgY29uZmlnLmxvY2FsTm9kZS5ob3N0UG9ydCA9IHByZWZlcmVuY2VzLmxvY2FsTm9kZUhvc3RQb3J0O1xufVxuXG5leHBvcnQgeyBjb25maWcsIHByZWZlcmVuY2VzLCB1cGRhdGVQcmVmZXJlbmNlcywgZGVmYXVsdHMgfTtcblxuXG4iXX0=
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updatePreferences = updatePreferences;
exports.completeConfig = completeConfig;
exports.netsFromArgsOrAll = netsFromArgsOrAll;
exports.netsFromArgsOrDefault = netsFromArgsOrDefault;
exports.defaultValues = exports.config = void 0;

var _utils = require("./utils");

/*
 * Copyright 2018-2019 TON DEV SOLUTIONS LTD.
 *
 * Licensed under the SOFTWARE EVALUATION License (the "License"); you may not use
 * this file except in compliance with the License.  You may obtain a copy of the
 * License at: https://www.ton.dev/licenses
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific TON DEV software governing permissions and
 * limitations under the License.
 *
 */
var path = require('path');

var os = require('os');

var fs = require('fs');

var tonlabsHome = path.join(os.homedir(), '.tonlabs');
var defaultValues = {
  version: 'latest',
  net: {
    name: 'default',
    image: 'tonlabs/local-node',
    container: 'tonlabs-local-node',
    port: '80',
    arangoPort: '8529'
  },
  compilers: {
    image: 'tonlabs/compilers',
    container: 'tonlabs-compilers'
  }
};
exports.defaultValues = defaultValues;
var defaultPreferences = {
  net: {
    name: defaultValues.net.name,
    version: defaultValues.version,
    hostPort: defaultValues.net.port,
    arangoHostPort: ''
  },
  compilers: {
    version: defaultValues.version
  }
};
var user = (0, _utils.toIdentifier)(os.userInfo().username).toLowerCase();

function createNetConfig(preferences) {
  var containerNameSuffix = preferences.name !== defaultValues.net.name ? "-".concat(preferences.name) : '';
  return {
    preferences: preferences,
    image: "".concat(defaultValues.net.image, ":").concat(preferences.version),
    container: "".concat(defaultValues.net.container, "-").concat(user).concat(containerNameSuffix)
  };
}

function createCompilersConfig(preferences) {
  return {
    preferences: preferences,
    image: "".concat(defaultValues.compilers.image, ":").concat(preferences.version),
    container: "".concat(defaultValues.compilers.container, "-").concat(user),
    mountSource: path.join(tonlabsHome, 'compilers', 'projects'),
    mountDestination: '/projects'
  };
}

var preferences = {
  compilers: defaultPreferences.compilers,
  nets: []
};
var config = {
  auth: {
    authconfig: {
      username: process.env.TONDEV_DH_USER || '',
      password: process.env.TONDEV_DH_PASSWORD || ''
    }
  },
  compilers: createCompilersConfig(defaultPreferences.compilers),
  net: {
    "default": createNetConfig(defaultPreferences.net),
    all: [],
    fromArgs: []
  }
};
exports.config = config;

function preferencesFilePath() {
  return path.join(tonlabsHome, 'preferences.json');
}

var options = {
  net: []
};

function readPreferencesOrDefault(path, def) {
  try {
    return JSON.parse(fs.readFileSync(path, {
      encoding: 'utf8'
    }));
  } catch (_unused) {}

  return def;
}

function writePreferences(path, preferences) {
  fs.writeFileSync(path, JSON.stringify(preferences), {
    encoding: 'utf8'
  });
}

function ensureNetPreferences(name) {
  var existing = preferences.nets.find(function (x) {
    return x.name.toLowerCase() === name.toLowerCase();
  });

  if (existing) {
    return existing;
  }

  var created = Object.assign({}, defaultPreferences.net);
  created.name = name;
  preferences.nets.push(created);
  return created;
}

function applyPreferences() {
  preferences.compilers = preferences.compilers || Object.assign({}, defaultPreferences.compilers);
  preferences.nets = preferences.nets || [];
  config.compilers = createCompilersConfig(preferences.compilers);
  ensureNetPreferences(defaultValues.net.name);
  options.net.forEach(ensureNetPreferences);
  var namesFromArgs = new Set(options.net);
  config.net.all = preferences.nets.map(createNetConfig);
  config.net["default"] = config.net.all.find(function (x) {
    return x.preferences.name === defaultValues.net.name;
  }) || config.net["default"];
  config.net.fromArgs = config.net.all.filter(function (x) {
    return namesFromArgs.has(x.preferences.name);
  });
}

function updatePreferences() {
  writePreferences(preferencesFilePath(), preferences);
  applyPreferences();
}

function completeConfig(args) {
  options = (0, _utils.argsToOptions)(args, {
    net: {
      def: '',
      valueCount: 1000,
      "short": 'n'
    }
  });
  preferences = readPreferencesOrDefault(preferencesFilePath(), preferences);
  applyPreferences();
  updatePreferences();
}

function netsFromArgsOrAll() {
  return config.net.fromArgs.length > 0 ? config.net.fromArgs : config.net.all;
}

function netsFromArgsOrDefault() {
  return config.net.fromArgs.length > 0 ? config.net.fromArgs : [config.net["default"]];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Network = void 0;

var _docker = require("../utils/docker");

var _utils = require("../utils/utils");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Network {
  constructor(config) {
    _defineProperty(this, "name", void 0);

    _defineProperty(this, "version", void 0);

    _defineProperty(this, "hostPort", void 0);

    _defineProperty(this, "arangoHostPort", void 0);

    _defineProperty(this, "requiredImage", void 0);

    _defineProperty(this, "containerName", void 0);

    this.setConfig(config);
  }

  setConfig(config) {
    this.name = config.name;
    this.version = config.version;
    this.hostPort = config.hostPort || '';
    this.arangoHostPort = config.arangoHostPort || '';
    this.requiredImage = `${Network.imagePrefix}:${config.version}`;
    const suffix = config.name !== Network.defaultName ? `-${config.name}` : '';
    this.containerName = `${Network.containerPrefix}-${_utils.userIdentifier}${suffix}`;
  }

  getConfig() {
    return {
      name: this.name,
      version: this.version,
      hostPort: this.hostPort,
      arangoHostPort: this.arangoHostPort
    };
  }

  async createContainer(docker) {
    const ports = {
      '80/tcp': [{
        HostIp: '',
        HostPort: `${this.hostPort}`
      }]
    };

    if (this.arangoHostPort !== '') {
      ports['8529/tcp'] = [{
        HostIp: '',
        HostPort: this.arangoHostPort
      }];
    }

    return docker.client.createContainer({
      name: this.containerName,
      interactive: true,
      Image: this.requiredImage,
      Env: ['USER_AGREEMENT=yes'],
      HostConfig: {
        PortBindings: ports
      }
    });
  }

}

exports.Network = Network;

_defineProperty(Network, "imagePrefix", 'tonlabs/local-node');

_defineProperty(Network, "containerPrefix", 'tonlabs-local-node');

_defineProperty(Network, "defaultName", 'default');

_defineProperty(Network, "defaultConfig", Object.freeze({
  name: 'default',
  version: 'latest',
  hostPort: '80',
  arangoHostPort: ''
}));

_defineProperty(Network, "defaultArangoPort", '8529');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9uZXR3b3Jrcy9uZXR3b3Jrcy5qcyJdLCJuYW1lcyI6WyJOZXR3b3JrIiwiY29uc3RydWN0b3IiLCJjb25maWciLCJzZXRDb25maWciLCJuYW1lIiwidmVyc2lvbiIsImhvc3RQb3J0IiwiYXJhbmdvSG9zdFBvcnQiLCJyZXF1aXJlZEltYWdlIiwiaW1hZ2VQcmVmaXgiLCJzdWZmaXgiLCJkZWZhdWx0TmFtZSIsImNvbnRhaW5lck5hbWUiLCJjb250YWluZXJQcmVmaXgiLCJ1c2VySWRlbnRpZmllciIsImdldENvbmZpZyIsImNyZWF0ZUNvbnRhaW5lciIsImRvY2tlciIsInBvcnRzIiwiSG9zdElwIiwiSG9zdFBvcnQiLCJjbGllbnQiLCJpbnRlcmFjdGl2ZSIsIkltYWdlIiwiRW52IiwiSG9zdENvbmZpZyIsIlBvcnRCaW5kaW5ncyIsIk9iamVjdCIsImZyZWV6ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQWtCQTs7QUFDQTs7OztBQVNBLE1BQU1BLE9BQU4sQ0FBc0M7QUFtQmxDQyxFQUFBQSxXQUFXLENBQUNDLE1BQUQsRUFBd0I7QUFBQTs7QUFBQTs7QUFBQTs7QUFBQTs7QUFBQTs7QUFBQTs7QUFDL0IsU0FBS0MsU0FBTCxDQUFlRCxNQUFmO0FBQ0g7O0FBRURDLEVBQUFBLFNBQVMsQ0FBQ0QsTUFBRCxFQUF3QjtBQUM3QixTQUFLRSxJQUFMLEdBQVlGLE1BQU0sQ0FBQ0UsSUFBbkI7QUFDQSxTQUFLQyxPQUFMLEdBQWVILE1BQU0sQ0FBQ0csT0FBdEI7QUFDQSxTQUFLQyxRQUFMLEdBQWdCSixNQUFNLENBQUNJLFFBQVAsSUFBbUIsRUFBbkM7QUFDQSxTQUFLQyxjQUFMLEdBQXNCTCxNQUFNLENBQUNLLGNBQVAsSUFBeUIsRUFBL0M7QUFDQSxTQUFLQyxhQUFMLEdBQXNCLEdBQUVSLE9BQU8sQ0FBQ1MsV0FBWSxJQUFHUCxNQUFNLENBQUNHLE9BQVEsRUFBOUQ7QUFDQSxVQUFNSyxNQUFNLEdBQUdSLE1BQU0sQ0FBQ0UsSUFBUCxLQUFnQkosT0FBTyxDQUFDVyxXQUF4QixHQUF1QyxJQUFHVCxNQUFNLENBQUNFLElBQUssRUFBdEQsR0FBMEQsRUFBekU7QUFDQSxTQUFLUSxhQUFMLEdBQXNCLEdBQUVaLE9BQU8sQ0FBQ2EsZUFBZ0IsSUFBR0MscUJBQWUsR0FBRUosTUFBTyxFQUEzRTtBQUNIOztBQUVESyxFQUFBQSxTQUFTLEdBQWtCO0FBQ3ZCLFdBQU87QUFDSFgsTUFBQUEsSUFBSSxFQUFFLEtBQUtBLElBRFI7QUFFSEMsTUFBQUEsT0FBTyxFQUFFLEtBQUtBLE9BRlg7QUFHSEMsTUFBQUEsUUFBUSxFQUFFLEtBQUtBLFFBSFo7QUFJSEMsTUFBQUEsY0FBYyxFQUFFLEtBQUtBO0FBSmxCLEtBQVA7QUFNSDs7QUFFRCxRQUFNUyxlQUFOLENBQXNCQyxNQUF0QixFQUFtRTtBQUMvRCxVQUFNQyxLQUFvQixHQUFHO0FBQ3pCLGdCQUFVLENBQ047QUFDSUMsUUFBQUEsTUFBTSxFQUFFLEVBRFo7QUFFSUMsUUFBQUEsUUFBUSxFQUFHLEdBQUUsS0FBS2QsUUFBUztBQUYvQixPQURNO0FBRGUsS0FBN0I7O0FBUUEsUUFBSSxLQUFLQyxjQUFMLEtBQXdCLEVBQTVCLEVBQWdDO0FBQzVCVyxNQUFBQSxLQUFLLENBQUMsVUFBRCxDQUFMLEdBQW9CLENBQ2hCO0FBQ0lDLFFBQUFBLE1BQU0sRUFBRSxFQURaO0FBRUlDLFFBQUFBLFFBQVEsRUFBRSxLQUFLYjtBQUZuQixPQURnQixDQUFwQjtBQU1IOztBQUNELFdBQU9VLE1BQU0sQ0FBQ0ksTUFBUCxDQUFjTCxlQUFkLENBQThCO0FBQ2pDWixNQUFBQSxJQUFJLEVBQUUsS0FBS1EsYUFEc0I7QUFFakNVLE1BQUFBLFdBQVcsRUFBRSxJQUZvQjtBQUdqQ0MsTUFBQUEsS0FBSyxFQUFFLEtBQUtmLGFBSHFCO0FBSWpDZ0IsTUFBQUEsR0FBRyxFQUFFLENBQUMsb0JBQUQsQ0FKNEI7QUFLakNDLE1BQUFBLFVBQVUsRUFBRTtBQUNSQyxRQUFBQSxZQUFZLEVBQUVSO0FBRE47QUFMcUIsS0FBOUIsQ0FBUDtBQVNIOztBQXBFaUM7Ozs7Z0JBQWhDbEIsTyxpQkFDbUIsb0I7O2dCQURuQkEsTyxxQkFFdUIsb0I7O2dCQUZ2QkEsTyxpQkFHbUIsUzs7Z0JBSG5CQSxPLG1CQUlvQzJCLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjO0FBQ2hEeEIsRUFBQUEsSUFBSSxFQUFFLFNBRDBDO0FBRWhEQyxFQUFBQSxPQUFPLEVBQUUsUUFGdUM7QUFHaERDLEVBQUFBLFFBQVEsRUFBRSxJQUhzQztBQUloREMsRUFBQUEsY0FBYyxFQUFFO0FBSmdDLENBQWQsQzs7Z0JBSnBDUCxPLHVCQVV5QixNIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDE4LTIwMjAgVE9OIERFViBTT0xVVElPTlMgTFRELlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBTT0ZUV0FSRSBFVkFMVUFUSU9OIExpY2Vuc2UgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZVxuICogdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlXG4gKiBMaWNlbnNlIGF0OiBodHRwczovL3d3dy50b24uZGV2L2xpY2Vuc2VzXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBUT04gREVWIHNvZnR3YXJlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xuXG4vLyBAZmxvd1xuXG5pbXBvcnQgdHlwZSB7IENvbnRhaW5lckRlZiwgRG9ja2VyQ29udGFpbmVyLCBEUG9ydEJpbmRpbmdzIH0gZnJvbSBcIi4uL3V0aWxzL2RvY2tlclwiO1xuaW1wb3J0IHsgRGV2RG9ja2VyIH0gZnJvbSBcIi4uL3V0aWxzL2RvY2tlclwiO1xuaW1wb3J0IHsgdXNlcklkZW50aWZpZXIgfSBmcm9tIFwiLi4vdXRpbHMvdXRpbHNcIjtcblxuZXhwb3J0IHR5cGUgTmV0d29ya0NvbmZpZyA9IHtcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgdmVyc2lvbjogc3RyaW5nLFxuICAgIGhvc3RQb3J0OiBzdHJpbmcsXG4gICAgYXJhbmdvSG9zdFBvcnQ6IHN0cmluZyxcbn07XG5cbmNsYXNzIE5ldHdvcmsgaW1wbGVtZW50cyBDb250YWluZXJEZWYge1xuICAgIHN0YXRpYyBpbWFnZVByZWZpeCA9ICd0b25sYWJzL2xvY2FsLW5vZGUnO1xuICAgIHN0YXRpYyBjb250YWluZXJQcmVmaXggPSAndG9ubGFicy1sb2NhbC1ub2RlJztcbiAgICBzdGF0aWMgZGVmYXVsdE5hbWUgPSAnZGVmYXVsdCc7XG4gICAgc3RhdGljIGRlZmF1bHRDb25maWc6IE5ldHdvcmtDb25maWcgPSBPYmplY3QuZnJlZXplKHtcbiAgICAgICAgbmFtZTogJ2RlZmF1bHQnLFxuICAgICAgICB2ZXJzaW9uOiAnbGF0ZXN0JyxcbiAgICAgICAgaG9zdFBvcnQ6ICc4MCcsXG4gICAgICAgIGFyYW5nb0hvc3RQb3J0OiAnJyxcbiAgICB9KTtcbiAgICBzdGF0aWMgZGVmYXVsdEFyYW5nb1BvcnQgPSAnODUyOSc7XG5cbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgdmVyc2lvbjogc3RyaW5nO1xuICAgIGhvc3RQb3J0OiBzdHJpbmc7XG4gICAgYXJhbmdvSG9zdFBvcnQ6IHN0cmluZztcbiAgICByZXF1aXJlZEltYWdlOiBzdHJpbmc7XG4gICAgY29udGFpbmVyTmFtZTogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoY29uZmlnOiBOZXR3b3JrQ29uZmlnKSB7XG4gICAgICAgIHRoaXMuc2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgfVxuXG4gICAgc2V0Q29uZmlnKGNvbmZpZzogTmV0d29ya0NvbmZpZykge1xuICAgICAgICB0aGlzLm5hbWUgPSBjb25maWcubmFtZTtcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gY29uZmlnLnZlcnNpb247XG4gICAgICAgIHRoaXMuaG9zdFBvcnQgPSBjb25maWcuaG9zdFBvcnQgfHwgJyc7XG4gICAgICAgIHRoaXMuYXJhbmdvSG9zdFBvcnQgPSBjb25maWcuYXJhbmdvSG9zdFBvcnQgfHwgJyc7XG4gICAgICAgIHRoaXMucmVxdWlyZWRJbWFnZSA9IGAke05ldHdvcmsuaW1hZ2VQcmVmaXh9OiR7Y29uZmlnLnZlcnNpb259YDtcbiAgICAgICAgY29uc3Qgc3VmZml4ID0gY29uZmlnLm5hbWUgIT09IE5ldHdvcmsuZGVmYXVsdE5hbWUgPyBgLSR7Y29uZmlnLm5hbWV9YCA6ICcnO1xuICAgICAgICB0aGlzLmNvbnRhaW5lck5hbWUgPSBgJHtOZXR3b3JrLmNvbnRhaW5lclByZWZpeH0tJHt1c2VySWRlbnRpZmllcn0ke3N1ZmZpeH1gO1xuICAgIH1cblxuICAgIGdldENvbmZpZygpOiBOZXR3b3JrQ29uZmlnIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgICAgICAgIHZlcnNpb246IHRoaXMudmVyc2lvbixcbiAgICAgICAgICAgIGhvc3RQb3J0OiB0aGlzLmhvc3RQb3J0LFxuICAgICAgICAgICAgYXJhbmdvSG9zdFBvcnQ6IHRoaXMuYXJhbmdvSG9zdFBvcnRcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGNyZWF0ZUNvbnRhaW5lcihkb2NrZXI6IERldkRvY2tlcik6IFByb21pc2U8RG9ja2VyQ29udGFpbmVyPiB7XG4gICAgICAgIGNvbnN0IHBvcnRzOiBEUG9ydEJpbmRpbmdzID0ge1xuICAgICAgICAgICAgJzgwL3RjcCc6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIEhvc3RJcDogJycsXG4gICAgICAgICAgICAgICAgICAgIEhvc3RQb3J0OiBgJHt0aGlzLmhvc3RQb3J0fWAsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLmFyYW5nb0hvc3RQb3J0ICE9PSAnJykge1xuICAgICAgICAgICAgcG9ydHNbJzg1MjkvdGNwJ10gPSBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBIb3N0SXA6ICcnLFxuICAgICAgICAgICAgICAgICAgICBIb3N0UG9ydDogdGhpcy5hcmFuZ29Ib3N0UG9ydCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkb2NrZXIuY2xpZW50LmNyZWF0ZUNvbnRhaW5lcih7XG4gICAgICAgICAgICBuYW1lOiB0aGlzLmNvbnRhaW5lck5hbWUsXG4gICAgICAgICAgICBpbnRlcmFjdGl2ZTogdHJ1ZSxcbiAgICAgICAgICAgIEltYWdlOiB0aGlzLnJlcXVpcmVkSW1hZ2UsXG4gICAgICAgICAgICBFbnY6IFsnVVNFUl9BR1JFRU1FTlQ9eWVzJ10sXG4gICAgICAgICAgICBIb3N0Q29uZmlnOiB7XG4gICAgICAgICAgICAgICAgUG9ydEJpbmRpbmdzOiBwb3J0cyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuXG5leHBvcnQge1xuICAgIE5ldHdvcmtcbn1cbiJdfQ==
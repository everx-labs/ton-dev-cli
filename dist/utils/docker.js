"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DevDocker = exports.ContainerStatus = void 0;

var _dockerode = _interopRequireDefault(require("dockerode"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const ContainerStatus = {
  missing: 0,
  created: 1,
  running: 2
};
exports.ContainerStatus = ContainerStatus;

class DevDocker {
  constructor() {
    _defineProperty(this, "client", void 0);

    _defineProperty(this, "_images", void 0);

    _defineProperty(this, "_containers", void 0);

    _defineProperty(this, "_onStartupImagesPassed", void 0);

    _defineProperty(this, "onStartupImages", void 0);

    _defineProperty(this, "onBeforePull", void 0);

    this.client = new _dockerode.default();
    this.onStartupImages = null;
    this.onBeforePull = null;
    this._onStartupImagesPassed = false;
    this._images = null;
    this._containers = null;
  }

  dropCache() {
    this._images = null;
    this._containers = null;
  }

  async getImageInfos() {
    if (!this._images) {
      const images = await this.client.listImages({
        all: true
      });
      this._images = images;

      if (!this._onStartupImagesPassed) {
        this._onStartupImagesPassed = true;

        if (this.onStartupImages) {
          this.onStartupImages(images);
        }
      }

      this._images = images;
    }

    return this._images || [];
  }

  async getContainerInfos() {
    if (!this._containers) {
      this._containers = await this.client.listContainers({
        all: true
      });
    }

    return this._containers || [];
  }

  async numericVersion() {
    const version = await this.client.version();
    return (0, _utils.versionToNumber)(version.Version);
  }

  async removeImages(nameMatches, containersOnly) {
    // Stop and remove containers that belongs to images
    const containerInfos = (await this.getContainerInfos()).filter(info => {
      return nameMatches.find(match => DevDocker.containersImageMatched(info, match));
    });

    for (let i = 0; i < containerInfos.length; i += 1) {
      const info = containerInfos[i];
      (0, _utils.progress)(`Removing container [${DevDocker.containerTitle(info)}]`);
      const container = this.client.getContainer(info.Id);

      if (DevDocker.isRunning(info)) {
        await container.stop();
      }

      await container.remove();
      (0, _utils.progressDone)();
    }

    if (containersOnly) {
      return;
    } // Remove images


    const imageInfos = (await this.getImageInfos()).filter(info => {
      return nameMatches.find(match => DevDocker.imageHasMatchedName(info, match));
    });

    for (let i = 0; i < imageInfos.length; i += 1) {
      const info = imageInfos[i];
      (0, _utils.progress)(`Removing image [${DevDocker.imageTitle(info)}]`);
      const image = this.client.getImage(info.Id);
      await image.remove();
      (0, _utils.progressDone)();
    }
  }

  async pull(repoTag) {
    if (this.onBeforePull) {
      await this.onBeforePull(repoTag);
    }

    const client = this.client;
    const title = `Pulling [${repoTag}]`;
    (0, _utils.progress)(title);
    const image = await new Promise((resolve, reject) => {
      client.pull(repoTag, {}, function (err, stream) {
        if (!stream) {
          reject(err);
          return;
        }

        let lastReportTime = Date.now();
        client.modem.followProgress(stream, onFinished, onProgress);

        function onFinished(err, output) {
          resolve(output);
        }

        function onProgress(event) {
          (0, _utils.progressLine)(`${title}... ${event.progress || ''}`);
        }
      });
    });
    (0, _utils.progress)(title);
    (0, _utils.progressDone)();
    return image;
  }

  async findImageInfo(name) {
    return (await this.getImageInfos()).find(x => DevDocker.imageHasMatchedName(x, name)) || null;
  }

  async findContainerInfo(name) {
    return (await this.getContainerInfos()).find(x => DevDocker.hasName(x, name)) || null;
  }

  async shutdownContainer(def, downTo) {
    const info = await this.findContainerInfo(def.containerName);

    if (!info) {
      return;
    }

    if (downTo < ContainerStatus.running && DevDocker.isRunning(info)) {
      (0, _utils.progress)(`Stopping [${def.containerName}]`);
      await this.client.getContainer(info.Id).stop();
      (0, _utils.progressDone)();
      this.dropCache();
    }

    if (downTo < ContainerStatus.created) {
      (0, _utils.progress)(`Removing [${def.containerName}]`);
      await this.client.getContainer(info.Id).remove();
      (0, _utils.progressDone)();
      this.dropCache();
    }
  }

  async ensureImage(requiredImage) {
    if (!(await this.findImageInfo(requiredImage))) {
      await this.pull(requiredImage);
      this.dropCache();
    }
  }

  async startupContainer(def, upTo) {
    await this.ensureImage(def.requiredImage);
    let info = await this.findContainerInfo(def.containerName);

    if (upTo >= ContainerStatus.created && !info) {
      (0, _utils.progress)(`Creating ${def.containerName}`);
      await def.createContainer(this);
      (0, _utils.progressDone)();
      this.dropCache();
      info = await this.findContainerInfo(def.containerName);
    }

    if (upTo >= ContainerStatus.running && info && !DevDocker.isRunning(info)) {
      (0, _utils.progress)(`Starting ${def.containerName}`);
      await this.client.getContainer(info.Id).start();
      (0, _utils.progressDone)();
      this.dropCache();
    }
  }

  async shutdownContainers(defs, downTo) {
    for (let i = 0; i < defs.length; i += 1) {
      await this.shutdownContainer(defs[i], downTo);
    }
  }

  async startupContainers(defs, upTo) {
    for (let i = 0; i < defs.length; i += 1) {
      await this.startupContainer(defs[i], upTo);
    }
  }

  async ensureRunning(def) {
    await this.startupContainer(def, ContainerStatus.running);
    const info = await this.findContainerInfo(def.containerName);
    return this.client.getContainer(info && info.Id || def.containerName);
  }

  static hasName(container, name) {
    const nameToFind = `/${name}`.toLowerCase();
    return !!(container.Names || []).find(n => n.toLowerCase() === nameToFind);
  }

  static imageTitle(info) {
    return DevDocker.imageNames(info)[0] || info.Id;
  }

  static containerTitle(info) {
    return info.Names.map(name => name.startsWith('/') ? name.substr(1) : name).join(';');
  } // if match specified with tag compare exactly
  // if match specified without tag compare untagged names


  static imageNameMatched(imageName, match) {
    imageName = imageName.toLowerCase();
    match = match.toLowerCase();
    const matchParts = match.split(':');

    if (matchParts.length > 1) {
      return imageName === match;
    }

    const imageParts = imageName.split(':');
    return imageParts[0] === matchParts[0];
  }

  static imageNames(info) {
    return [...(info.RepoTags || []), ...(info.RepoDigests || []).map(digest => {
      return digest.split('@').join(':');
    })];
  }

  static imageHasMatchedName(info, match) {
    return !!DevDocker.imageNames(info).find(name => this.imageNameMatched(name, match));
  }

  static isRunning(info) {
    return !!info && info.State.toLowerCase() === 'running';
  }

  static containersImageMatched(info, match) {
    return this.imageNameMatched(info.Image, match);
  }

}

exports.DevDocker = DevDocker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
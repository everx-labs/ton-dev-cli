"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.showUsage = showUsage;
exports.run = run;
exports.versionToNumber = versionToNumber;
exports.forceRmDir = forceRmDir;
exports.ensureCleanDirectory = ensureCleanDirectory;
exports.bindPathJoinTo = bindPathJoinTo;
exports.inputLine = inputLine;
exports.breakWords = breakWords;
exports.httpsGetJson = httpsGetJson;
exports.toIdentifier = toIdentifier;
exports.progress = progress;
exports.progressLine = progressLine;
exports.progressDone = progressDone;
exports.parseFileArg = parseFileArg;
exports.tonlabsHomePath = exports.userIdentifier = exports.version = void 0;

var _texts = require("./texts");

/*
 * Copyright 2018-2020 TON DEV SOLUTIONS LTD.
 *
 * Licensed under the SOFTWARE EVALUATION License (the "License"); you may not use
 * this file except in compliance with the License.  You may obtain a copy of the
 * License at: https://www.ton.dev/licenses
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific TON DEV software governing permissions and
 * limitations under the License.
 *
 */
const fs = require('fs');

const os = require('os');

const path = require('path');

const {
  spawn
} = require('child_process');

const version = JSON.parse(fs.readFileSync(path.join(__dirname, '..', '..', 'package.json')).toString()).version;
exports.version = version;

function showUsage(usage) {
  console.log(_texts.texts.usageHeader(version));
  console.log(usage);
}

const spawnEnv = { ...process.env
};

function run(name, ...args) {
  return new Promise((resolve, reject) => {
    try {
      const spawned = spawn(name, args, {
        env: spawnEnv
      });
      const errors = [];
      const output = [];
      spawned.stdout.on('data', function (data) {
        output.push(data.toString());
      });
      spawned.stderr.on('data', data => {
        errors.push(data.toString());
      });
      spawned.on('error', err => {
        reject(err);
      });
      spawned.on('close', code => {
        if (code === 0) {
          resolve(output.join(''));
        } else {
          reject(errors.join(''));
        }
      });
    } catch (error) {
      reject(error);
    }
  });
}

function versionToNumber(s) {
  const parts = `${s || ''}`.split('.').map(x => Number.parseInt(x)).slice(0, 3);

  while (parts.length < 3) {
    parts.push(0);
  }

  return parts[0] * 1000000 + parts[1] * 1000 + parts[2];
}

function forceRmDir(dir) {
  fs.readdirSync(dir).forEach(item => {
    const itemPath = path.join(dir, item);
    const stat = fs.statSync(itemPath);

    if (itemPath === "." || itemPath === "..") {} else if (stat.isDirectory()) {
      forceRmDir(itemPath);
    } else {
      fs.unlinkSync(itemPath);
    }
  });
  fs.rmdirSync(dir);
}

function ensureCleanDirectory(path) {
  if (fs.existsSync(path)) {
    forceRmDir(path);
  }

  fs.mkdirSync(path, {
    recursive: true
  });
}

function join(base, item, separator) {
  const baseWithSep = base.endsWith(separator);
  const itemWithSep = item.startsWith(separator);

  if (baseWithSep && itemWithSep) {
    return `${base}${item.substr(1)}`;
  }

  if (!baseWithSep && !itemWithSep) {
    return `${base}/${item}`;
  }

  return `${base}${item}`;
}

function bindPathJoinTo(base, separator) {
  if (separator) {
    const sep = separator;
    return (...items) => {
      let path = base;
      items.forEach(x => path = join(path, x, sep));
      return path;
    };
  }

  return (...items) => {
    return items.length > 0 ? path.join(base, ...items) : base;
  };
}

function inputLine() {
  return new Promise(resolve => {
    const standard_input = process.stdin;
    standard_input.setEncoding('utf-8');
    standard_input.once('data', function (data) {
      resolve(`${data}`.trim());
    });
  });
}

function breakWords(s) {
  const words = s.split(' ');
  let result = '';
  let line = '';
  words.forEach(w => {
    if (line.length + w.length > 80) {
      if (result !== '') {
        result += '\n';
      }

      result += line;
      line = '';
    }

    if (line !== '') {
      line += ' ';
    }

    line += w;
  });

  if (line !== '') {
    if (result !== '') {
      result += '\n';
    }

    result += line;
  }

  return result;
}

const https = require('https');

function httpsGetJson(url) {
  return new Promise((resolve, reject) => {
    const tryUrl = url => {
      https.get(url, function (res) {
        let body = '';
        res.on('data', function (chunk) {
          body += chunk;
        });
        res.on('end', function () {
          if (res.statusCode === 301) {
            const redirectUrl = res.headers['location'];
            tryUrl(redirectUrl);
            return;
          }

          const response = JSON.parse(body);
          resolve(response);
        });
      }).on('error', error => {
        reject(error);
      });
    };

    tryUrl(url);
  });
}

function toIdentifier(s) {
  let identifier = '';

  for (let i = 0; i < s.length; i += 1) {
    const c = s[i];
    const isLetter = c.toLowerCase() !== c.toUpperCase();
    const isDigit = !isLetter && '0123456789'.includes(c);

    if (isLetter || isDigit) {
      identifier += c;
    }
  }

  return identifier;
}

const userIdentifier = toIdentifier(os.userInfo().username).toLowerCase();
exports.userIdentifier = userIdentifier;
const tonlabsHomePath = bindPathJoinTo(path.join(os.homedir(), '.tonlabs'));
exports.tonlabsHomePath = tonlabsHomePath;
let _progressLine = '';

function progressLine(line) {
  process.stdout.write(`\r${line}`);
  const extra = _progressLine.length - line.length;

  if (extra > 0) {
    process.stdout.write(' '.repeat(extra) + '\b'.repeat(extra));
  }

  _progressLine = line;
}

function progress(info) {
  progressLine(`${info}...`);
}

function progressDone() {
  console.log(' âœ“');
  _progressLine = '';
}

function parseFileArg(fileArg, ext, fileMustExists) {
  if (os.platform() === 'darwin' && fileArg.startsWith('~/')) {
    fileArg = path.join(os.homedir(), fileArg.substr(2));
  }

  const filePath = path.resolve(fileArg);
  const dir = bindPathJoinTo(path.dirname(filePath));
  const base = path.basename(filePath, ext);
  const name = base.includes('.') ? base : `${base}${ext}`;
  const result = {
    dir,
    base,
    name
  };

  if (fileMustExists && !fs.existsSync(result.dir(name))) {
    console.error(_texts.texts.sourceFileNotFound(name));
    process.exit(1);
  }

  return result;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
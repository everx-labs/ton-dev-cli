"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.showUsage = showUsage;
exports.run = run;
exports.versionToNumber = versionToNumber;
exports.forceRmDir = forceRmDir;
exports.ensureCleanDirectory = ensureCleanDirectory;
exports.bindPathJoinTo = bindPathJoinTo;
exports.inputLine = inputLine;
exports.breakWords = breakWords;
exports.httpsGetJson = httpsGetJson;
exports.toIdentifier = toIdentifier;
exports.progress = progress;
exports.progressDone = progressDone;
exports.parseFileArg = parseFileArg;
exports.tonlabsHomePath = exports.userIdentifier = exports.version = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _texts = require("./texts");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var fs = require('fs');

var os = require('os');

var path = require('path');

var _require = require('child_process'),
    spawn = _require.spawn;

var version = JSON.parse(fs.readFileSync(path.join(__dirname, '..', '..', 'package.json')).toString()).version;
exports.version = version;

function showUsage(usage) {
  console.log(_texts.texts.usageHeader(version));
  console.log(usage);
}

var spawnEnv = _objectSpread({}, process.env);

function run(name) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  return new Promise(function (resolve, reject) {
    try {
      var spawned = spawn(name, args, {
        env: spawnEnv
      });
      var errors = [];
      var output = [];
      spawned.stdout.on('data', function (data) {
        output.push(data.toString());
      });
      spawned.stderr.on('data', function (data) {
        errors.push(data.toString());
      });
      spawned.on('error', function (err) {
        reject(err);
      });
      spawned.on('close', function (code) {
        if (code === 0) {
          resolve(output.join(''));
        } else {
          reject(errors.join(''));
        }
      });
    } catch (error) {
      reject(error);
    }
  });
}

function versionToNumber(s) {
  var parts = "".concat(s || '').split('.').map(function (x) {
    return Number.parseInt(x);
  }).slice(0, 3);

  while (parts.length < 3) {
    parts.push(0);
  }

  return parts[0] * 1000000 + parts[1] * 1000 + parts[2];
}

function forceRmDir(dir) {
  fs.readdirSync(dir).forEach(function (item) {
    var itemPath = path.join(dir, item);
    var stat = fs.statSync(itemPath);

    if (itemPath === "." || itemPath === "..") {} else if (stat.isDirectory()) {
      forceRmDir(itemPath);
    } else {
      fs.unlinkSync(itemPath);
    }
  });
  fs.rmdirSync(dir);
}

function ensureCleanDirectory(path) {
  if (fs.existsSync(path)) {
    forceRmDir(path);
  }

  fs.mkdirSync(path, {
    recursive: true
  });
}

function join(base, item, separator) {
  var baseWithSep = base.endsWith(separator);
  var itemWithSep = item.startsWith(separator);

  if (baseWithSep && itemWithSep) {
    return "".concat(base).concat(item.substr(1));
  }

  if (!baseWithSep && !itemWithSep) {
    return "".concat(base, "/").concat(item);
  }

  return "".concat(base).concat(item);
}

function bindPathJoinTo(base, separator) {
  if (separator) {
    var sep = separator;
    return function () {
      var path = base;

      for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        items[_key2] = arguments[_key2];
      }

      items.forEach(function (x) {
        return path = join(path, x, sep);
      });
      return path;
    };
  }

  return function () {
    for (var _len3 = arguments.length, items = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      items[_key3] = arguments[_key3];
    }

    return items.length > 0 ? path.join.apply(path, [base].concat(items)) : base;
  };
}

function inputLine() {
  return new Promise(function (resolve) {
    var standard_input = process.stdin;
    standard_input.setEncoding('utf-8');
    standard_input.once('data', function (data) {
      resolve("".concat(data).trim());
    });
  });
}

function breakWords(s) {
  var words = s.split(' ');
  var result = '';
  var line = '';
  words.forEach(function (w) {
    if (line.length + w.length > 80) {
      if (result !== '') {
        result += '\n';
      }

      result += line;
      line = '';
    }

    if (line !== '') {
      line += ' ';
    }

    line += w;
  });

  if (line !== '') {
    if (result !== '') {
      result += '\n';
    }

    result += line;
  }

  return result;
}

var https = require('https');

function httpsGetJson(url) {
  return new Promise(function (resolve, reject) {
    var tryUrl = function tryUrl(url) {
      https.get(url, function (res) {
        var body = '';
        res.on('data', function (chunk) {
          body += chunk;
        });
        res.on('end', function () {
          if (res.statusCode === 301) {
            var redirectUrl = res.headers['location'];
            tryUrl(redirectUrl);
            return;
          }

          var response = JSON.parse(body);
          resolve(response);
        });
      }).on('error', function (error) {
        reject(error);
      });
    };

    tryUrl(url);
  });
}

function toIdentifier(s) {
  var identifier = '';

  for (var i = 0; i < s.length; i += 1) {
    var c = s[i];
    var isLetter = c.toLowerCase() !== c.toUpperCase();
    var isDigit = !isLetter && '0123456789'.includes(c);

    if (isLetter || isDigit) {
      identifier += c;
    }
  }

  return identifier;
}

var userIdentifier = toIdentifier(os.userInfo().username).toLowerCase();
exports.userIdentifier = userIdentifier;
var tonlabsHomePath = bindPathJoinTo(path.join(os.homedir(), '.tonlabs'));
exports.tonlabsHomePath = tonlabsHomePath;

function progress(info) {
  process.stdout.write("".concat(info, "..."));
}

function progressDone() {
  console.log(' âœ“');
}

function parseFileArg(fileArg, ext) {
  if (os.platform() === 'darwin' && fileArg.startsWith('~/')) {
    fileArg = path.join(os.homedir(), fileArg.substr(2));
  }

  var filePath = path.resolve(fileArg);
  var dir = bindPathJoinTo(path.dirname(filePath));
  var base = path.basename(filePath, ext);
  var name = base.includes('.') ? base : "".concat(base).concat(ext);
  var result = {
    dir: dir,
    base: base,
    name: name
  };

  if (!fs.existsSync(result.dir(name))) {
    console.error(_texts.texts.sourceFileNotFound(name));
    process.exit(1);
  }

  return result;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
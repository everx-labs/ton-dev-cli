"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.showUsage = showUsage;
exports.run = run;
exports.versionToNumber = versionToNumber;
exports.forceRmDir = forceRmDir;
exports.ensureCleanDirectory = ensureCleanDirectory;
exports.bindPathJoinTo = bindPathJoinTo;
exports.inputLine = inputLine;
exports.breakWords = breakWords;
exports.httpsGetJson = httpsGetJson;
exports.toIdentifier = toIdentifier;
exports.progress = progress;
exports.progressLine = progressLine;
exports.progressDone = progressDone;
exports.parseFileArg = parseFileArg;
exports.tonlabsHomePath = exports.userIdentifier = exports.version = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _texts = require("./texts");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var fs = require('fs');

var os = require('os');

var path = require('path');

var _require = require('child_process'),
    spawn = _require.spawn;

var version = JSON.parse(fs.readFileSync(path.join(__dirname, '..', '..', 'package.json')).toString()).version;
exports.version = version;

function showUsage(usage) {
  console.log(_texts.texts.usageHeader(version));
  console.log(usage);
}

var spawnEnv = _objectSpread({}, process.env);

function run(name) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  return new Promise(function (resolve, reject) {
    try {
      var spawned = spawn(name, args, {
        env: spawnEnv
      });
      var errors = [];
      var output = [];
      spawned.stdout.on('data', function (data) {
        output.push(data.toString());
      });
      spawned.stderr.on('data', function (data) {
        errors.push(data.toString());
      });
      spawned.on('error', function (err) {
        reject(err);
      });
      spawned.on('close', function (code) {
        if (code === 0) {
          resolve(output.join(''));
        } else {
          reject(errors.join(''));
        }
      });
    } catch (error) {
      reject(error);
    }
  });
}

function versionToNumber(s) {
  var parts = "".concat(s || '').split('.').map(function (x) {
    return Number.parseInt(x);
  }).slice(0, 3);

  while (parts.length < 3) {
    parts.push(0);
  }

  return parts[0] * 1000000 + parts[1] * 1000 + parts[2];
}

function forceRmDir(dir) {
  fs.readdirSync(dir).forEach(function (item) {
    var itemPath = path.join(dir, item);
    var stat = fs.statSync(itemPath);

    if (itemPath === "." || itemPath === "..") {} else if (stat.isDirectory()) {
      forceRmDir(itemPath);
    } else {
      fs.unlinkSync(itemPath);
    }
  });
  fs.rmdirSync(dir);
}

function ensureCleanDirectory(path) {
  if (fs.existsSync(path)) {
    forceRmDir(path);
  }

  fs.mkdirSync(path, {
    recursive: true
  });
}

function join(base, item, separator) {
  var baseWithSep = base.endsWith(separator);
  var itemWithSep = item.startsWith(separator);

  if (baseWithSep && itemWithSep) {
    return "".concat(base).concat(item.substr(1));
  }

  if (!baseWithSep && !itemWithSep) {
    return "".concat(base, "/").concat(item);
  }

  return "".concat(base).concat(item);
}

function bindPathJoinTo(base, separator) {
  if (separator) {
    var sep = separator;
    return function () {
      var path = base;

      for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        items[_key2] = arguments[_key2];
      }

      items.forEach(function (x) {
        return path = join(path, x, sep);
      });
      return path;
    };
  }

  return function () {
    for (var _len3 = arguments.length, items = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      items[_key3] = arguments[_key3];
    }

    return items.length > 0 ? path.join.apply(path, [base].concat(items)) : base;
  };
}

function inputLine() {
  return new Promise(function (resolve) {
    var standard_input = process.stdin;
    standard_input.setEncoding('utf-8');
    standard_input.once('data', function (data) {
      resolve("".concat(data).trim());
    });
  });
}

function breakWords(s) {
  var words = s.split(' ');
  var result = '';
  var line = '';
  words.forEach(function (w) {
    if (line.length + w.length > 80) {
      if (result !== '') {
        result += '\n';
      }

      result += line;
      line = '';
    }

    if (line !== '') {
      line += ' ';
    }

    line += w;
  });

  if (line !== '') {
    if (result !== '') {
      result += '\n';
    }

    result += line;
  }

  return result;
}

var https = require('https');

function httpsGetJson(url) {
  return new Promise(function (resolve, reject) {
    var tryUrl = function tryUrl(url) {
      https.get(url, function (res) {
        var body = '';
        res.on('data', function (chunk) {
          body += chunk;
        });
        res.on('end', function () {
          if (res.statusCode === 301) {
            var redirectUrl = res.headers['location'];
            tryUrl(redirectUrl);
            return;
          }

          var response = JSON.parse(body);
          resolve(response);
        });
      }).on('error', function (error) {
        reject(error);
      });
    };

    tryUrl(url);
  });
}

function toIdentifier(s) {
  var identifier = '';

  for (var i = 0; i < s.length; i += 1) {
    var c = s[i];
    var isLetter = c.toLowerCase() !== c.toUpperCase();
    var isDigit = !isLetter && '0123456789'.includes(c);

    if (isLetter || isDigit) {
      identifier += c;
    }
  }

  return identifier;
}

var userIdentifier = toIdentifier(os.userInfo().username).toLowerCase();
exports.userIdentifier = userIdentifier;
var tonlabsHomePath = bindPathJoinTo(path.join(os.homedir(), '.tonlabs'));
exports.tonlabsHomePath = tonlabsHomePath;
var _progressLine = '';

function progressLine(line) {
  process.stdout.write("\r".concat(line));
  var extra = _progressLine.length - line.length;

  if (extra > 0) {
    process.stdout.write(' '.repeat(extra) + '\b'.repeat(extra));
  }

  _progressLine = line;
}

function progress(info) {
  progressLine("".concat(info, "..."));
}

function progressDone() {
  console.log(' âœ“');
  _progressLine = '';
}

function parseFileArg(fileArg, ext) {
  if (os.platform() === 'darwin' && fileArg.startsWith('~/')) {
    fileArg = path.join(os.homedir(), fileArg.substr(2));
  }

  var filePath = path.resolve(fileArg);
  var dir = bindPathJoinTo(path.dirname(filePath));
  var base = path.basename(filePath, ext);
  var name = base.includes('.') ? base : "".concat(base).concat(ext);
  var result = {
    dir: dir,
    base: base,
    name: name
  };

  if (!fs.existsSync(result.dir(name))) {
    console.error(_texts.texts.sourceFileNotFound(name));
    process.exit(1);
  }

  return result;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy91dGlscy5qcyJdLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJvcyIsInBhdGgiLCJzcGF3biIsInZlcnNpb24iLCJKU09OIiwicGFyc2UiLCJyZWFkRmlsZVN5bmMiLCJqb2luIiwiX19kaXJuYW1lIiwidG9TdHJpbmciLCJzaG93VXNhZ2UiLCJ1c2FnZSIsImNvbnNvbGUiLCJsb2ciLCJ0ZXh0cyIsInVzYWdlSGVhZGVyIiwic3Bhd25FbnYiLCJwcm9jZXNzIiwiZW52IiwicnVuIiwibmFtZSIsImFyZ3MiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInNwYXduZWQiLCJlcnJvcnMiLCJvdXRwdXQiLCJzdGRvdXQiLCJvbiIsImRhdGEiLCJwdXNoIiwic3RkZXJyIiwiZXJyIiwiY29kZSIsImVycm9yIiwidmVyc2lvblRvTnVtYmVyIiwicyIsInBhcnRzIiwic3BsaXQiLCJtYXAiLCJ4IiwiTnVtYmVyIiwicGFyc2VJbnQiLCJzbGljZSIsImxlbmd0aCIsImZvcmNlUm1EaXIiLCJkaXIiLCJyZWFkZGlyU3luYyIsImZvckVhY2giLCJpdGVtIiwiaXRlbVBhdGgiLCJzdGF0Iiwic3RhdFN5bmMiLCJpc0RpcmVjdG9yeSIsInVubGlua1N5bmMiLCJybWRpclN5bmMiLCJlbnN1cmVDbGVhbkRpcmVjdG9yeSIsImV4aXN0c1N5bmMiLCJta2RpclN5bmMiLCJyZWN1cnNpdmUiLCJiYXNlIiwic2VwYXJhdG9yIiwiYmFzZVdpdGhTZXAiLCJlbmRzV2l0aCIsIml0ZW1XaXRoU2VwIiwic3RhcnRzV2l0aCIsInN1YnN0ciIsImJpbmRQYXRoSm9pblRvIiwic2VwIiwiaXRlbXMiLCJpbnB1dExpbmUiLCJzdGFuZGFyZF9pbnB1dCIsInN0ZGluIiwic2V0RW5jb2RpbmciLCJvbmNlIiwidHJpbSIsImJyZWFrV29yZHMiLCJ3b3JkcyIsInJlc3VsdCIsImxpbmUiLCJ3IiwiaHR0cHMiLCJodHRwc0dldEpzb24iLCJ1cmwiLCJ0cnlVcmwiLCJnZXQiLCJyZXMiLCJib2R5IiwiY2h1bmsiLCJzdGF0dXNDb2RlIiwicmVkaXJlY3RVcmwiLCJoZWFkZXJzIiwicmVzcG9uc2UiLCJ0b0lkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwiaSIsImMiLCJpc0xldHRlciIsInRvTG93ZXJDYXNlIiwidG9VcHBlckNhc2UiLCJpc0RpZ2l0IiwiaW5jbHVkZXMiLCJ1c2VySWRlbnRpZmllciIsInVzZXJJbmZvIiwidXNlcm5hbWUiLCJ0b25sYWJzSG9tZVBhdGgiLCJob21lZGlyIiwiX3Byb2dyZXNzTGluZSIsInByb2dyZXNzTGluZSIsIndyaXRlIiwiZXh0cmEiLCJyZXBlYXQiLCJwcm9ncmVzcyIsImluZm8iLCJwcm9ncmVzc0RvbmUiLCJwYXJzZUZpbGVBcmciLCJmaWxlQXJnIiwiZXh0IiwicGxhdGZvcm0iLCJmaWxlUGF0aCIsImRpcm5hbWUiLCJiYXNlbmFtZSIsInNvdXJjZUZpbGVOb3RGb3VuZCIsImV4aXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFlQTs7Ozs7O0FBRUEsSUFBTUEsRUFBRSxHQUFHQyxPQUFPLENBQUMsSUFBRCxDQUFsQjs7QUFDQSxJQUFNQyxFQUFFLEdBQUdELE9BQU8sQ0FBQyxJQUFELENBQWxCOztBQUNBLElBQU1FLElBQUksR0FBR0YsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O2VBQ2tCQSxPQUFPLENBQUMsZUFBRCxDO0lBQWpCRyxLLFlBQUFBLEs7O0FBQ1IsSUFBTUMsT0FBTyxHQUFHQyxJQUFJLENBQUNDLEtBQUwsQ0FBV1AsRUFBRSxDQUFDUSxZQUFILENBQWdCTCxJQUFJLENBQUNNLElBQUwsQ0FBVUMsU0FBVixFQUFxQixJQUFyQixFQUEyQixJQUEzQixFQUFpQyxjQUFqQyxDQUFoQixFQUFrRUMsUUFBbEUsRUFBWCxFQUF5Rk4sT0FBekc7OztBQUVBLFNBQVNPLFNBQVQsQ0FBbUJDLEtBQW5CLEVBQWtDO0FBQzlCQyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsYUFBTUMs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QixDQUFsQyxFQUE0RDtBQUN4RG1ELElBQUFBLE9BQU8sR0FBR3BILElBQUksQ0FBQ00sSUFBTCxDQUFVUCxFQUFFLENBQUMyRyxPQUFILEVBQVYsRUFBd0JVLE9BQU8sQ0FBQ2xELE1BQVIsQ0FBZSxDQUFmLENBQXhCLENBQVY7QUFDSDs7QUFDRCxNQUFNcUQsUUFBUSxHQUFHdkgsSUFBSSxDQUFDc0IsT0FBTCxDQUFhOEYsT0FBYixDQUFqQjtBQUNBLE1BQU10RSxHQUFHLEdBQUdxQixjQUFjLENBQUNuRSxJQUFJLENBQUN3SCxPQUFMLENBQWFELFFBQWIsQ0FBRCxDQUExQjtBQUNBLE1BQU0zRCxJQUFJLEdBQUc1RCxJQUFJLENBQUN5SCxRQUFMLENBQWNGLFFBQWQsRUFBd0JGLEdBQXhCLENBQWI7QUFDQSxNQUFNbEcsSUFBSSxHQUFHeUMsSUFBSSxDQUFDeUMsUUFBTCxDQUFjLEdBQWQsSUFBcUJ6QyxJQUFyQixhQUErQkEsSUFBL0IsU0FBc0N5RCxHQUF0QyxDQUFiO0FBQ0EsTUFBTXZDLE1BQU0sR0FBRztBQUNYaEMsSUFBQUEsR0FBRyxFQUFIQSxHQURXO0FBRVhjLElBQUFBLElBQUksRUFBSkEsSUFGVztBQUdYekMsSUFBQUEsSUFBSSxFQUFKQTtBQUhXLEdBQWY7O0FBS0EsTUFBSSxDQUFDdEIsRUFBRSxDQUFDNEQsVUFBSCxDQUFjcUIsTUFBTSxDQUFDaEMsR0FBUCxDQUFXM0IsSUFBWCxDQUFkLENBQUwsRUFBc0M7QUFDbENSLElBQUFBLE9BQU8sQ0FBQ3VCLEtBQVIsQ0FBY3JCLGFBQU02RyxrQkFBTixDQUF5QnZHLElBQXpCLENBQWQ7QUFDQUgsSUFBQUEsT0FBTyxDQUFDMkcsSUFBUixDQUFhLENBQWI7QUFDSDs7QUFDRCxTQUFPN0MsTUFBUDtBQUNIIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDE4LTIwMTkgVE9OIERFViBTT0xVVElPTlMgTFRELlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBTT0ZUV0FSRSBFVkFMVUFUSU9OIExpY2Vuc2UgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZVxuICogdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlXG4gKiBMaWNlbnNlIGF0OiBodHRwczovL3d3dy50b24uZGV2L2xpY2Vuc2VzXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBUT04gREVWIHNvZnR3YXJlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xuLy8gQGZsb3dcbmltcG9ydCB7IHRleHRzIH0gZnJvbSAnLi90ZXh0cyc7XG5cbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IG9zID0gcmVxdWlyZSgnb3MnKTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCB7IHNwYXduIH0gPSByZXF1aXJlKCdjaGlsZF9wcm9jZXNzJyk7XG5jb25zdCB2ZXJzaW9uID0gSlNPTi5wYXJzZShmcy5yZWFkRmlsZVN5bmMocGF0aC5qb2luKF9fZGlybmFtZSwgJy4uJywgJy4uJywgJ3BhY2thZ2UuanNvbicpKS50b1N0cmluZygpKS52ZXJzaW9uO1xuXG5mdW5jdGlvbiBzaG93VXNhZ2UodXNhZ2U6IHN0cmluZykge1xuICAgIGNvbnNvbGUubG9nKHRleHRzLnVzYWdlSGVhZGVyKHZlcnNpb24pKTtcbiAgICBjb25zb2xlLmxvZyh1c2FnZSk7XG59XG5cbmNvbnN0IHNwYXduRW52ID0ge1xuICAgIC4uLnByb2Nlc3MuZW52LFxufTtcblxuZnVuY3Rpb24gcnVuKG5hbWU6IHN0cmluZywgLi4uYXJnczogc3RyaW5nW10pOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBzcGF3bmVkID0gc3Bhd24obmFtZSwgYXJncywgeyBlbnY6IHNwYXduRW52IH0pO1xuICAgICAgICAgICAgY29uc3QgZXJyb3JzID0gW107XG4gICAgICAgICAgICBjb25zdCBvdXRwdXQgPSBbXTtcblxuICAgICAgICAgICAgc3Bhd25lZC5zdGRvdXQub24oJ2RhdGEnLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIG91dHB1dC5wdXNoKGRhdGEudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgc3Bhd25lZC5zdGRlcnIub24oJ2RhdGEnLCAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKGRhdGEudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgc3Bhd25lZC5vbignZXJyb3InLCAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgc3Bhd25lZC5vbignY2xvc2UnLCAoY29kZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjb2RlID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUob3V0cHV0LmpvaW4oJycpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3JzLmpvaW4oJycpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gdmVyc2lvblRvTnVtYmVyKHM6IHN0cmluZyk6IG51bWJlciB7XG4gICAgY29uc3QgcGFydHMgPSBgJHtzIHx8ICcnfWAuc3BsaXQoJy4nKS5tYXAoeCA9PiBOdW1iZXIucGFyc2VJbnQoeCkpLnNsaWNlKDAsIDMpO1xuICAgIHdoaWxlIChwYXJ0cy5sZW5ndGggPCAzKSB7XG4gICAgICAgIHBhcnRzLnB1c2goMCk7XG4gICAgfVxuICAgIHJldHVybiBwYXJ0c1swXSAqIDEwMDAwMDAgKyBwYXJ0c1sxXSAqIDEwMDAgKyBwYXJ0c1syXTtcbn1cblxuZnVuY3Rpb24gZm9yY2VSbURpcihkaXI6IHN0cmluZykge1xuICAgIGZzLnJlYWRkaXJTeW5jKGRpcikuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICBjb25zdCBpdGVtUGF0aCA9IHBhdGguam9pbihkaXIsIGl0ZW0pO1xuICAgICAgICBjb25zdCBzdGF0ID0gZnMuc3RhdFN5bmMoaXRlbVBhdGgpO1xuXG4gICAgICAgIGlmIChpdGVtUGF0aCA9PT0gXCIuXCIgfHwgaXRlbVBhdGggPT09IFwiLi5cIikge1xuICAgICAgICB9IGVsc2UgaWYgKHN0YXQuaXNEaXJlY3RvcnkoKSkge1xuICAgICAgICAgICAgZm9yY2VSbURpcihpdGVtUGF0aCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmcy51bmxpbmtTeW5jKGl0ZW1QYXRoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGZzLnJtZGlyU3luYyhkaXIpO1xufVxuXG5mdW5jdGlvbiBlbnN1cmVDbGVhbkRpcmVjdG9yeShwYXRoOiBzdHJpbmcpIHtcbiAgICBpZiAoZnMuZXhpc3RzU3luYyhwYXRoKSkge1xuICAgICAgICBmb3JjZVJtRGlyKHBhdGgpO1xuICAgIH1cbiAgICBmcy5ta2RpclN5bmMocGF0aCwgKHsgcmVjdXJzaXZlOiB0cnVlIH06IGFueSkpO1xufVxuXG5leHBvcnQgdHlwZSBQYXRoSm9pbiA9ICguLi5pdGVtczogc3RyaW5nW10pID0+IHN0cmluZztcblxuZnVuY3Rpb24gam9pbihiYXNlOiBzdHJpbmcsIGl0ZW06IHN0cmluZywgc2VwYXJhdG9yOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IGJhc2VXaXRoU2VwID0gYmFzZS5lbmRzV2l0aChzZXBhcmF0b3IpO1xuICAgIGNvbnN0IGl0ZW1XaXRoU2VwID0gaXRlbS5zdGFydHNXaXRoKHNlcGFyYXRvcik7XG4gICAgaWYgKGJhc2VXaXRoU2VwICYmIGl0ZW1XaXRoU2VwKSB7XG4gICAgICAgIHJldHVybiBgJHtiYXNlfSR7aXRlbS5zdWJzdHIoMSl9YDtcbiAgICB9XG4gICAgaWYgKCFiYXNlV2l0aFNlcCAmJiAhaXRlbVdpdGhTZXApIHtcbiAgICAgICAgcmV0dXJuIGAke2Jhc2V9LyR7aXRlbX1gO1xuICAgIH1cbiAgICByZXR1cm4gYCR7YmFzZX0ke2l0ZW19YDtcbn1cblxuZnVuY3Rpb24gYmluZFBhdGhKb2luVG8oYmFzZTogc3RyaW5nLCBzZXBhcmF0b3I/OiBzdHJpbmcpOiBQYXRoSm9pbiB7XG4gICAgaWYgKHNlcGFyYXRvcikge1xuICAgICAgICBjb25zdCBzZXAgPSBzZXBhcmF0b3I7XG4gICAgICAgIHJldHVybiAoLi4uaXRlbXM6IHN0cmluZ1tdKTogc3RyaW5nID0+IHtcbiAgICAgICAgICAgIGxldCBwYXRoID0gYmFzZTtcbiAgICAgICAgICAgIGl0ZW1zLmZvckVhY2goeCA9PiBwYXRoID0gam9pbihwYXRoLCB4LCBzZXApKTtcbiAgICAgICAgICAgIHJldHVybiBwYXRoO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAoLi4uaXRlbXM6IHN0cmluZ1tdKTogc3RyaW5nID0+IHtcbiAgICAgICAgcmV0dXJuIGl0ZW1zLmxlbmd0aCA+IDAgPyBwYXRoLmpvaW4oYmFzZSwgLi4uaXRlbXMpIDogYmFzZTtcbiAgICB9XG59XG5cblxuZnVuY3Rpb24gaW5wdXRMaW5lKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIGNvbnN0IHN0YW5kYXJkX2lucHV0ID0gcHJvY2Vzcy5zdGRpbjtcbiAgICAgICAgc3RhbmRhcmRfaW5wdXQuc2V0RW5jb2RpbmcoJ3V0Zi04Jyk7XG4gICAgICAgIHN0YW5kYXJkX2lucHV0Lm9uY2UoJ2RhdGEnLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgcmVzb2x2ZShgJHtkYXRhfWAudHJpbSgpKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGJyZWFrV29yZHMoczogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCB3b3JkcyA9IHMuc3BsaXQoJyAnKTtcbiAgICBsZXQgcmVzdWx0ID0gJyc7XG4gICAgbGV0IGxpbmUgPSAnJztcbiAgICB3b3Jkcy5mb3JFYWNoKCh3KSA9PiB7XG4gICAgICAgIGlmIChsaW5lLmxlbmd0aCArIHcubGVuZ3RoID4gODApIHtcbiAgICAgICAgICAgIGlmIChyZXN1bHQgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdcXG4nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0ICs9IGxpbmU7XG4gICAgICAgICAgICBsaW5lID0gJyc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxpbmUgIT09ICcnKSB7XG4gICAgICAgICAgICBsaW5lICs9ICcgJztcbiAgICAgICAgfVxuICAgICAgICBsaW5lICs9IHc7XG4gICAgfSk7XG4gICAgaWYgKGxpbmUgIT09ICcnKSB7XG4gICAgICAgIGlmIChyZXN1bHQgIT09ICcnKSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gJ1xcbic7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ICs9IGxpbmU7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cblxuY29uc3QgaHR0cHMgPSByZXF1aXJlKCdodHRwcycpO1xuXG5mdW5jdGlvbiBodHRwc0dldEpzb24odXJsOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTwqW10+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3QgdHJ5VXJsID0gKHVybCkgPT4ge1xuICAgICAgICAgICAgaHR0cHMuZ2V0KHVybCwgZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgICAgICAgIGxldCBib2R5ID0gJyc7XG5cbiAgICAgICAgICAgICAgICByZXMub24oJ2RhdGEnLCBmdW5jdGlvbiAoY2h1bmspIHtcbiAgICAgICAgICAgICAgICAgICAgYm9keSArPSBjaHVuaztcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJlcy5vbignZW5kJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzLnN0YXR1c0NvZGUgPT09IDMwMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVkaXJlY3RVcmwgPSByZXMuaGVhZGVyc1snbG9jYXRpb24nXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeVVybChyZWRpcmVjdFVybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBKU09OLnBhcnNlKGJvZHkpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pLm9uKCdlcnJvcicsIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdHJ5VXJsKHVybCk7XG4gICAgfSlcbn1cblxuZnVuY3Rpb24gdG9JZGVudGlmaWVyKHM6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgbGV0IGlkZW50aWZpZXIgPSAnJztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3QgYyA9IHNbaV07XG4gICAgICAgIGNvbnN0IGlzTGV0dGVyID0gYy50b0xvd2VyQ2FzZSgpICE9PSBjLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIGNvbnN0IGlzRGlnaXQgPSAhaXNMZXR0ZXIgJiYgJzAxMjM0NTY3ODknLmluY2x1ZGVzKGMpO1xuICAgICAgICBpZiAoaXNMZXR0ZXIgfHwgaXNEaWdpdCkge1xuICAgICAgICAgICAgaWRlbnRpZmllciArPSBjO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpZGVudGlmaWVyO1xufVxuXG5jb25zdCB1c2VySWRlbnRpZmllciA9IHRvSWRlbnRpZmllcihvcy51c2VySW5mbygpLnVzZXJuYW1lKS50b0xvd2VyQ2FzZSgpO1xuY29uc3QgdG9ubGFic0hvbWVQYXRoID0gYmluZFBhdGhKb2luVG8ocGF0aC5qb2luKG9zLmhvbWVkaXIoKSwgJy50b25sYWJzJykpO1xuXG5sZXQgX3Byb2dyZXNzTGluZTogc3RyaW5nID0gJyc7XG5cbmZ1bmN0aW9uIHByb2dyZXNzTGluZShsaW5lOiBzdHJpbmcpIHtcbiAgICBwcm9jZXNzLnN0ZG91dC53cml0ZShgXFxyJHtsaW5lfWApO1xuICAgIGNvbnN0IGV4dHJhID0gX3Byb2dyZXNzTGluZS5sZW5ndGggLSBsaW5lLmxlbmd0aDtcbiAgICBpZiAoZXh0cmEgPiAwKSB7XG4gICAgICAgIHByb2Nlc3Muc3Rkb3V0LndyaXRlKCcgJy5yZXBlYXQoZXh0cmEpICsgJ1xcYicucmVwZWF0KGV4dHJhKSk7XG4gICAgfVxuICAgIF9wcm9ncmVzc0xpbmUgPSBsaW5lO1xufVxuXG5mdW5jdGlvbiBwcm9ncmVzcyhpbmZvOiBzdHJpbmcpIHtcbiAgICBwcm9ncmVzc0xpbmUoYCR7aW5mb30uLi5gKTtcbn1cblxuZnVuY3Rpb24gcHJvZ3Jlc3NEb25lKCkge1xuICAgIGNvbnNvbGUubG9nKCcg4pyTJyk7XG4gICAgX3Byb2dyZXNzTGluZSA9ICcnO1xufVxuXG5leHBvcnQgdHlwZSBGaWxlQXJnID0ge1xuICAgIGRpcjogUGF0aEpvaW4sXG4gICAgYmFzZTogc3RyaW5nLFxuICAgIG5hbWU6IHN0cmluZ1xufVxuXG5mdW5jdGlvbiBwYXJzZUZpbGVBcmcoZmlsZUFyZzogc3RyaW5nLCBleHQ6IHN0cmluZyk6IEZpbGVBcmcge1xuICAgIGlmIChvcy5wbGF0Zm9ybSgpID09PSAnZGFyd2luJyAmJiBmaWxlQXJnLnN0YXJ0c1dpdGgoJ34vJykpIHtcbiAgICAgICAgZmlsZUFyZyA9IHBhdGguam9pbihvcy5ob21lZGlyKCksIGZpbGVBcmcuc3Vic3RyKDIpKTtcbiAgICB9XG4gICAgY29uc3QgZmlsZVBhdGggPSBwYXRoLnJlc29sdmUoZmlsZUFyZyk7XG4gICAgY29uc3QgZGlyID0gYmluZFBhdGhKb2luVG8ocGF0aC5kaXJuYW1lKGZpbGVQYXRoKSk7XG4gICAgY29uc3QgYmFzZSA9IHBhdGguYmFzZW5hbWUoZmlsZVBhdGgsIGV4dCk7XG4gICAgY29uc3QgbmFtZSA9IGJhc2UuaW5jbHVkZXMoJy4nKSA/IGJhc2UgOiBgJHtiYXNlfSR7ZXh0fWA7XG4gICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgICBkaXIsXG4gICAgICAgIGJhc2UsXG4gICAgICAgIG5hbWVcbiAgICB9O1xuICAgIGlmICghZnMuZXhpc3RzU3luYyhyZXN1bHQuZGlyKG5hbWUpKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKHRleHRzLnNvdXJjZUZpbGVOb3RGb3VuZChuYW1lKSk7XG4gICAgICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuXG5cbmV4cG9ydCB7XG4gICAgdmVyc2lvbixcbiAgICBzaG93VXNhZ2UsXG4gICAgcnVuLFxuICAgIHZlcnNpb25Ub051bWJlcixcbiAgICBmb3JjZVJtRGlyLFxuICAgIGVuc3VyZUNsZWFuRGlyZWN0b3J5LFxuICAgIGJpbmRQYXRoSm9pblRvLFxuICAgIGlucHV0TGluZSxcbiAgICBicmVha1dvcmRzLFxuICAgIGh0dHBzR2V0SnNvbixcbiAgICB0b0lkZW50aWZpZXIsXG4gICAgdXNlcklkZW50aWZpZXIsXG4gICAgdG9ubGFic0hvbWVQYXRoLFxuICAgIHByb2dyZXNzLFxuICAgIHByb2dyZXNzTGluZSxcbiAgICBwcm9ncmVzc0RvbmUsXG4gICAgcGFyc2VGaWxlQXJnLFxufVxuIl19